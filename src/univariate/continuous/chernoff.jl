## chernoff.jl
##
## The code below is intended to go with the Distributions package of Julia.
## It was written by Joris Pinkse, joris@psu.edu, on December 12, 2017.  Caveat emptor.
##
## It computes pdf, cdf, moments, quantiles, and random numbers for the Chernoff distribution.
## The Chernoff distribution is the distribution of the random variable $X=\argmax_x \{ G(x) - x^2\}$,
## where G is standard two-sided Brownian motion and the maximum is taken over the entire real line.
## 
## The distribution arises as the limit distribution of various cube-root-n consistent estimators,
## including the isotonic regression estimator of Brunk, the isotonic density estimator of Grenander,
## the least median of squares estimator of Rousseeuw, and the maximum score estimator of Manski. 
##
## For theoretical results, see e.g. Pollard, Annals of Statistics, 1990.
## This code is based on Groeneboom and Wellner, Journal of Computational and Graphical Statistics, 2001.
## Most of the symbols have the same meaning as in the paper.
##
## Random numbers are drawn using a Ziggurat algorithm.  To obtain draws in the tails, the
## algorithm reverts to quantiles, which is slow.




chernoff_ab=Array{Float64,2}([
1.458333333333333297563818911847861171237132202677240745356200667660026278830061e-01 6.666666666666666296592325124947819858789443969726562500000000000000000000000000e-01;
-1.410590277777776449441445912782570294906183779571792245578042642424795399469188e-03 2.116402116402116389537300211324336941292773745757698690887546797842395089353063e-02;
-2.045269786155238943466365920861133091053489904404955747865105028084395810704867e-05 -7.893341226674573435788776227157536382499113242652816418707348530751857058723137e-04;
1.762177189719973685102156203213256525632166249807358209081883318599203562082005e-06 1.952097878187619215654605731800951282846021986468015760857355783666610993454834e-05;
-5.722759751183463241064573155430691589615546277557820980522059775317243910616367e-08 -3.184888134149932626504303990131150995381706326329574634319945866929994441988657e-07;
1.273811157732923444062453793618360085538997412107505116307032728684348525420047e-09 2.496495362555227490964197106443185290836632468396675727205473731315310845253384e-09;
-2.164082498615760676954820333507202849909696337575100925867800308140780929389755e-11 3.621643930400673305064145650021455327069889060828385794843766671046467358213942e-11;
2.879257596357860114895959471638217453362541248825378807040276471817035763954491e-13 -1.874438299727797222354938117596999590923124167631903264216557867846567526900779e-12;
-2.904496582565578090220865234936422285861482294513332303869391891886647982888103e-15 4.393984966701304570087691193019892455227499813615527216834020953955536791931328e-14;
1.821398272441642765438501099020282939686445021236368013611614339152612673247466e-17 -7.572370859245260443907439968567390179875515449365035452032363033373771027176486e-16;
4.318809086319946986187315392409517775085366597536791274938053726631769433259675e-20 1.06301867301302204287180277503823183953496764690628896126604852441982826156722e-17;
-3.459634830348894977647961223781744992375916952000514745340731040231570557597902e-21 -1.264518318712650052324998123218931277934558301760449015687720557717386475621559e-19;
6.541295360751684148556928287107801287577387885080613541289287494809521326667789e-23 1.295400090276414320464171174160038491032359591322743440422926976808732394302268e-21;
-8.922755249740909818003015662896649873615571591865653162857419435774255160862163e-25 -1.143779036917051316397667763709710076405400114355677669046981672628052064720772e-23;
1.01029110187619453654772294569726618541943770486256982607554010782334393694734e-26 8.543413293195205745734878203712174174202937822414729378400021209271365270109341e-26;
-9.976759882474874399658072169764454612437174330208022735615163762960300602157511e-29 -5.058799445927049742668378737213123832072464279441172343510217381845924006705294e-28;
])


chernoff_airyzeroprime=Array{Float64,2}([
-2.338107410459767038489197252446735440638540145672387852483854437213668002700283 0.7012108227206906 ;
-4.087949444130970616636988701457391060224764699108529754984160876025121946836039 -0.8031113696548534 ;
-5.520559828095551059129855512931293573797214280617525104832887576957494641381854 0.865204025894141 ;
-6.786708090071758998780246384496176966053882477393493616523529093556236556870949 -0.9108507370495821 ;
-7.944133587120853123138280555798268532140674396972214808643854285716448640295661 0.9473357094415571 ;
-9.022650853340980380158190839880089256524677535156082515560685683113282081689808 -0.9779228085695176 ;
-1.004017434155808593059455673736251809404290256910583310437135385095343268627139e+01 1.0043701226603126 ;
-1.10085243037332628932354396495901510167308253815040375057000134862444746944299e+01 -1.0277386888207862 ;
-1.193601556323626251700636490293058431557788623211982397092353864291237617779433e+01 1.0487206485881893 ;
-1.282877675286575720040672940724182447738641559957341994148696682189440270380737e+01 -1.0677938591574279 ;
-1.369148903521071792829569677946692054166536980920076805254071472510959163255647e+01 1.0853028313507 ;
-1.452782995177533498207398144299589337871416486983482524101054549228522669616057e+01 -1.1015045702774968 ;
-1.534075513597799685714620851348148670511758332024803704969134367360914003702281e+01 1.1165961779326556 ;
-1.613268515694577143934598044720252179051827239707628246640238983564053836405592e+01 -1.1307323104931881 ;
-1.690563399742994262703523877061147659909005109503171855603649023736813730559262e+01 1.1440366732735523 ;
-1.766130010569705750925365030401805595215321866811995330361255823961027252350523e+01 -1.156609849116565 #;
])



chernoff_cuberoottwo=2^(1.0/3)

function chernoff_p(y::Real)
  if y==0.0 return -sqrt(0.5*pi) end
  @assert(y>0.0,"y must not be negative")
  cnsty=y^(-1.5)
  return (y<=1.0) ? sum([(chernoff_ab[k,2]*cnsty-chernoff_ab[k,1]*sqrt(pi*0.5))*y^(3*k) for k=1:size(chernoff_ab,1)])-sqrt(0.5*pi) :
                    sum([exp(chernoff_cuberoottwo*chernoff_airyzeroprime[k,1]*y) for k=1:size(chernoff_airyzeroprime,1)]) * 2 * sqrt(2*pi) * exp(-y*y*y/6) - cnsty
  end
  

function chernoff_g(x::Real)
  function gfuncone(y::Real)
    return chernoff_p(y) * exp(-0.5*y*(2*x+y)*(2*x+y))
    end
  function gfunctwo(y::Real)
    z=2*x+y*y
    return (z*y*y +0.5 * z*z) * exp(-0.5*y*y*z*z)
    end
  return (x<=-1.0) ? 
    chernoff_cuberoottwo*chernoff_cuberoottwo * exp(2*x*x*x/3.0) * sum([exp(-chernoff_cuberoottwo*chernoff_airyzeroprime[k,1]*x) / chernoff_airyzeroprime[k,2] for k=1:size(chernoff_airyzeroprime,1)]) :
    2*x - (quadgk(gfuncone,0.0,Inf)[1]-4*quadgk(gfunctwo,0.0,Inf)[1]) / sqrt(2.0*pi)
  end
       

chernoff_f(x::Real)=chernoff_g(x)*chernoff_g(-x)*0.5
chernoff_F(x::Real)=(x<0.0) ? 1.0-chernoff_F(-x) : 0.5+quadgk(chernoff_f,0.0,x)[1] 
chernoff_Fbar(x::Real)= quadgk(chernoff_f,x,Inf)[1]  
 
struct Chernoff{T<:Real} <: ContinuousUnivariateDistribution
  function Chernoff{T}() where T
    new{T}()
    end
  end
Chernoff()=Chernoff{Real}()





### Required functions other than random number generation

pdf(d::Chernoff, x::Real)=chernoff_f(x)
logpdf(d::Chernoff, x::Real)=log(chernoff_g(x))+log(chernoff_g(-x))+log(0.5)
cdf(d::Chernoff,x::Real)=chernoff_F(x)
function quantile(d::Chernoff, tau::Real)
  precomputedquants=[
    0.0 -Inf;
    0.01 -1.171534341573129;
    0.025 -0.9981810946684274;
    0.05 -0.8450811886357725;
    0.1 -0.6642351964332931;
    0.2 -0.43982766604886553;
    0.25 -0.353308035220429;
    0.3 -0.2751512847290148; 
    0.4 -0.13319637678583637;
    0.5 0.0;
    0.6 0.13319637678583637;
    0.7 0.2751512847290147;
    0.75 0.353308035220429;
    0.8 0.4398276660488655;
    0.9 0.6642351964332931;
    0.95 0.8450811886357724;
    0.975 0.9981810946684272;
    0.99 1.17153434157313;
    1.0 Inf
  ]
  @assert(tau<=1.0 && tau>=0.0,"illegal value of tau")
  present=searchsortedfirst(precomputedquants[:,1],tau)
  if present<=size(precomputedquants,1)
    if tau==precomputedquants[present,1] return precomputedquants[present,2] end
    end
  if tau<0.001 return -newton(tau-x->chernoff_Fbar(x),chernoff_f,Distributions.quantile(Distributions.Normal(0.0,1.0),1.0-tau)*0.52) end
  if tau>0.999 return newton(x->1.0-tau-chernoff_Fbar(x),chernoff_f,Distributions.quantile(Distributions.Normal(0.0,1.0),tau)*0.52) end
  return newton(x->chernoff_F(x)-tau,chernoff_f,Distributions.quantile(Distributions.Normal(0.0,1.0),tau)*0.52)
  end
minimum(d::Chernoff)=-Inf
maximum(d::Chernoff)=Inf
insupport(d::Chernoff, x::Real)=isnan(x) ? false : true


### Recommended functions

mean(d::Chernoff) = 0.0
var(d::Chernoff) =0.26355964132470455
modes(d::Chernoff)=[0.0]
mode(d::Chernoff) = 0.0
skewness(d::Chernoff) = 0.0
kurtosis(d::Chernoff) = -0.16172525511461888
kurtosis(d::Chernoff,excess::Bool) = kurtosis(d) + (excess ? 0.0 : 3.0) 
entropy(d::Chernoff)=-0.7515605300273104


### Random number generation
oldrand(d::Chernoff)=quantile(d,Base.rand())
function rand(d::Chernoff)
  # Ziggurat random number generator --- slow in the tails
  A=0.03248227216266608
  xy=[
    1.4765521793744492 0.02016386420423385;
    1.3583996502410562 0.042162593823411566;
    1.2788224934376338 0.06607475557706186;
    1.2167121025431031 0.09147489698007219;
    1.164660153310361 0.11817165794330549;
    1.1191528874523227 0.14606157249935905;
    1.0782281238946987 0.17508555351826158;
    1.0406685077375248 0.20521115629454248;
    1.0056599129954287 0.2364240467790298;
    0.9726255909850547 0.26872350680813245;
    0.9411372703351518 0.3021199879039766;
    0.910863725882819 0.3366338395880132;
    0.8815390956471935 0.37229479658922043;
    0.8529422519848634 0.4091420247190392;
    0.8248826278765808 0.4472246406136998;
    0.7971898990526088 0.48660269400571066;
    0.769705944382039 0.5273486595545326;
    0.7422780374708061 0.5695495447104147;
    0.7147524811697309 0.6133097942704644;
    0.6869679724643997 0.6587552778727138;
    0.6587479056872714 0.7060388099508409;
    0.6298905501492661 0.7553479187650504;
    0.6001554584431008 0.8069160398536568;
    0.5692432986584453 0.8610391369707446;
    0.5367639126935895 0.9181013320624011;
    0.5021821750911241 0.97861633948841;
    0.4647187417226889 1.0432985878313983;
    0.42314920361072667 1.113195213997703;
    0.37533885097957154 1.1899583790598025;
    0.31692143952775814 1.2764995726449935;
    0.2358977457249061 1.3789927085182485;
    1.0218214689661219e-7 1.516689116183566
  ]
  n=size(xy,1)
  i=Base.rand(0:n-1)
  x=(2.0*Base.rand()-1)* ((i>0) ? xy[i,1] : A/xy[1,2])
  xabs=abs(x)
  if xabs<xy[i+1,1] return x end
  y= (i>0) ? (xy[i,2]+Base.rand()*(xy[i+1,2]-xy[i,2])) : Base.rand()*xy[1,2]
  if y<2.0*chernoff_f(xabs) return x end
  if i>0 return rand(d) end
  F0=chernoff_F(A/xy[1,2])
  tau=2.0*Base.rand()-1
  tauabs=abs(tau)
  return quantile(d,tauabs + (1-tauabs)*F0) * (tau/tauabs)
  end


