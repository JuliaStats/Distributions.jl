var documenterSearchIndex = {"docs":
[{"location":"matrix/#matrix-variates","page":"Matrix-variate Distributions","title":"Matrix-variate Distributions","text":"","category":"section"},{"location":"matrix/","page":"Matrix-variate Distributions","title":"Matrix-variate Distributions","text":"Matrix-variate distributions are the distributions whose variate forms are Matrixvariate (i.e each sample is a matrix). Abstract types for matrix-variate distributions:","category":"page"},{"location":"matrix/","page":"Matrix-variate Distributions","title":"Matrix-variate Distributions","text":"const MatrixDistribution{S<:ValueSupport} = Distribution{Matrixvariate,S}\n\nconst DiscreteMatrixDistribution   = Distribution{Matrixvariate, Discrete}\nconst ContinuousMatrixDistribution = Distribution{Matrixvariate, Continuous}","category":"page"},{"location":"matrix/","page":"Matrix-variate Distributions","title":"Matrix-variate Distributions","text":"More advanced functionalities related to random matrices can be found in the RandomMatrices.jl package.","category":"page"},{"location":"matrix/#Common-Interface","page":"Matrix-variate Distributions","title":"Common Interface","text":"","category":"section"},{"location":"matrix/","page":"Matrix-variate Distributions","title":"Matrix-variate Distributions","text":"All distributions implement the same set of methods:","category":"page"},{"location":"matrix/","page":"Matrix-variate Distributions","title":"Matrix-variate Distributions","text":"size(::MatrixDistribution)\nlength(::MatrixDistribution)\nDistributions.rank(::MatrixDistribution)\nmean(::MatrixDistribution)\nvar(::MatrixDistribution)\ncov(::MatrixDistribution)\npdf{T<:Real}(d::MatrixDistribution, x::AbstractMatrix{T})\nlogpdf{T<:Real}(d::MatrixDistribution, x::AbstractMatrix{T})\nDistributions._rand!(::AbstractRNG, ::MatrixDistribution, A::AbstractMatrix)\nvec(d::MatrixDistribution)","category":"page"},{"location":"matrix/#Base.size-Tuple{Distribution{Matrixvariate,S} where S<:ValueSupport}","page":"Matrix-variate Distributions","title":"Base.size","text":"size(d::MatrixDistribution)\n\nReturn the size of each sample from distribution d.\n\n\n\n\n\n","category":"method"},{"location":"matrix/#Base.length-Tuple{Distribution{Matrixvariate,S} where S<:ValueSupport}","page":"Matrix-variate Distributions","title":"Base.length","text":"length(d::MatrixDistribution)\n\nThe length (i.e number of elements) of each sample from the distribution d.\n\n\n\n\n\n","category":"method"},{"location":"matrix/#LinearAlgebra.rank-Tuple{Distribution{Matrixvariate,S} where S<:ValueSupport}","page":"Matrix-variate Distributions","title":"LinearAlgebra.rank","text":"rank(d::MatrixDistribution)\n\nThe rank of each sample from the distribution d.\n\n\n\n\n\n","category":"method"},{"location":"matrix/#Statistics.mean-Tuple{Distribution{Matrixvariate,S} where S<:ValueSupport}","page":"Matrix-variate Distributions","title":"Statistics.mean","text":"mean(d::MatrixDistribution)\n\nReturn the mean matrix of d.\n\n\n\n\n\n","category":"method"},{"location":"matrix/#Statistics.var-Tuple{Distribution{Matrixvariate,S} where S<:ValueSupport}","page":"Matrix-variate Distributions","title":"Statistics.var","text":"var(d::MatrixDistribution)\n\nCompute the matrix of element-wise variances for distribution d.\n\n\n\n\n\n","category":"method"},{"location":"matrix/#Statistics.cov-Tuple{Distribution{Matrixvariate,S} where S<:ValueSupport}","page":"Matrix-variate Distributions","title":"Statistics.cov","text":"cov(d::MatrixDistribution)\n\nCompute the covariance matrix for vec(X), where X is a random matrix with distribution d.\n\n\n\n\n\n","category":"method"},{"location":"matrix/#Distributions.pdf-Union{Tuple{T}, Tuple{Distribution{Matrixvariate,S} where S<:ValueSupport,AbstractArray{T,2}}} where T<:Real","page":"Matrix-variate Distributions","title":"Distributions.pdf","text":"pdf(d::MatrixDistribution, x::AbstractArray)\n\nCompute the probability density at the input matrix x.\n\n\n\n\n\n","category":"method"},{"location":"matrix/#Distributions.logpdf-Union{Tuple{T}, Tuple{Distribution{Matrixvariate,S} where S<:ValueSupport,AbstractArray{T,2}}} where T<:Real","page":"Matrix-variate Distributions","title":"Distributions.logpdf","text":"logpdf(d::MatrixDistribution, AbstractMatrix)\n\nCompute the logarithm of the probability density at the input matrix x.\n\n\n\n\n\n","category":"method"},{"location":"matrix/#Distributions._rand!-Tuple{AbstractRNG,Distribution{Matrixvariate,S} where S<:ValueSupport,AbstractArray{T,2} where T}","page":"Matrix-variate Distributions","title":"Distributions._rand!","text":"_rand!(::AbstractRNG, ::MatrixDistribution, A::AbstractMatrix)\n\nSample the matrix distribution and store the result in A. Must be implemented by matrix-variate distributions.\n\n\n\n\n\n","category":"method"},{"location":"matrix/#Base.vec-Tuple{Distribution{Matrixvariate,S} where S<:ValueSupport}","page":"Matrix-variate Distributions","title":"Base.vec","text":"vec(d::MatrixDistribution)\n\nIf known, returns a MultivariateDistribution instance representing the distribution of vec(X), where X is a random matrix with distribution d.\n\n\n\n\n\n","category":"method"},{"location":"matrix/#Distributions","page":"Matrix-variate Distributions","title":"Distributions","text":"","category":"section"},{"location":"matrix/","page":"Matrix-variate Distributions","title":"Matrix-variate Distributions","text":"MatrixNormal\nWishart\nInverseWishart\nMatrixReshaped\nMatrixTDist\nMatrixBeta\nMatrixFDist\nLKJ","category":"page"},{"location":"matrix/#Distributions.MatrixNormal","page":"Matrix-variate Distributions","title":"Distributions.MatrixNormal","text":"MatrixNormal(M, U, V)\n\nM::AbstractMatrix  n x p mean\nU::AbstractPDMat   n x n row covariance\nV::AbstractPDMat   p x p column covariance\n\nThe matrix normal distribution generalizes the multivariate normal distribution to ntimes p real matrices mathbfX. If mathbfXsim textrmMN_np(mathbfM mathbfU mathbfV), then its probability density function is\n\nf(mathbfXmathbfM mathbfU mathbfV) = fracexpleft( -frac12  mathrmtrleft mathbfV^-1 (mathbfX - mathbfM)^rmT mathbfU^-1 (mathbfX - mathbfM) right right)(2pi)^np2 mathbfV^n2 mathbfU^p2\n\nmathbfXsim textrmMN_np(mathbfMmathbfUmathbfV) if and only if textvec(mathbfX)sim textrmN(textvec(mathbfM)mathbfVotimesmathbfU).\n\n\n\n\n\n","category":"type"},{"location":"matrix/#Distributions.Wishart","page":"Matrix-variate Distributions","title":"Distributions.Wishart","text":"Wishart(ν, S)\n\nν::Real           degrees of freedom (whole number or a real number greater than p - 1)\nS::AbstractPDMat  p x p scale matrix\n\nThe Wishart distribution generalizes the gamma distribution to ptimes p real, positive semidefinite matrices mathbfH.\n\nIf nup-1, then mathbfHsim textrmW_p(nu mathbfS) has rank p and its probability density function is\n\nf(mathbfHnumathbfS) = frac12^nu p2 leftmathbfSright^nu2 Gamma_pleft(frac nu2right ) leftmathbfHright^(nu-p-1)2 e^-(12)operatornametr(mathbfS^-1mathbfH)\n\nIf nuleq p-1, then mathbfH is rank nu and it has a density with respect to a suitably chosen volume element on the space of positive semidefinite matrices. See here.\n\nFor integer nu, a random matrix given by\n\nmathbfH = mathbfXmathbfX^rmT\nquadmathbfX sim textrmMN_pnu(mathbf0 mathbfS mathbfI_nu)\n\nhas mathbfHsim textrmW_p(nu mathbfS). For non-integer nu, Wishart matrices can be generated via the Bartlett decomposition.\n\n\n\n\n\n","category":"type"},{"location":"matrix/#Distributions.InverseWishart","page":"Matrix-variate Distributions","title":"Distributions.InverseWishart","text":"InverseWishart(ν, Ψ)\n\nν::Real           degrees of freedom (greater than p - 1)\nΨ::AbstractPDMat  p x p scale matrix\n\nThe inverse Wishart distribution generalizes the inverse gamma distribution to ptimes p real, positive definite matrices boldsymbolSigma. If boldsymbolSigmasim textrmIW_p(nuboldsymbolPsi), then its probability density function is\n\nf(boldsymbolSigma nuboldsymbolPsi) =\nfracleftboldsymbolPsiright^nu22^nu p2Gamma_p(fracnu2) leftboldsymbolSigmaright^-(nu+p+1)2 e^-frac12operatornametr(boldsymbolPsiboldsymbolSigma^-1)\n\nmathbfHsim textrmW_p(nu mathbfS) if and only if mathbfH^-1sim textrmIW_p(nu mathbfS^-1).\n\n\n\n\n\n","category":"type"},{"location":"matrix/#Distributions.MatrixReshaped","page":"Matrix-variate Distributions","title":"Distributions.MatrixReshaped","text":"MatrixReshaped(D, n, p)\n\nD::MultivariateDistribution  base distribution\nn::Integer   number of rows\np::Integer   number of columns\n\nReshapes a multivariate distribution into a matrix distribution with n rows and p columns.\n\n\n\n\n\n","category":"type"},{"location":"matrix/#Distributions.MatrixTDist","page":"Matrix-variate Distributions","title":"Distributions.MatrixTDist","text":"MatrixTDist(ν, M, Σ, Ω)\n\nν::Real            positive degrees of freedom\nM::AbstractMatrix  n x p location\nΣ::AbstractPDMat   n x n scale\nΩ::AbstractPDMat   p x p scale\n\nThe matrix t-distribution generalizes the multivariate t-distribution to ntimes p real matrices mathbfX. If mathbfXsim textrmMT_np(numathbfMboldsymbolSigma boldsymbolOmega), then its probability density function is\n\nf(mathbfX  numathbfMboldsymbolSigma boldsymbolOmega) =\nc_0 leftmathbfI_n + boldsymbolSigma^-1(mathbfX - mathbfM)boldsymbolOmega^-1(mathbfX-mathbfM)^rmTright^-fracnu+n+p-12\n\nwhere\n\nc_0=fracGamma_pleft(fracnu+n+p-12right)(pi)^fracnp2 Gamma_pleft(fracnu+p-12right) boldsymbolOmega^-fracn2 boldsymbolSigma^-fracp2\n\nIf the joint distribution p(mathbfSmathbfX)=p(mathbfS)p(mathbfXmathbfS) is given by\n\nbeginalign*\nmathbfSsim textrmIW_n(nu + n - 1 boldsymbolSigma)\nmathbfXmathbfSsim textrmMN_np(mathbfM mathbfS boldsymbolOmega)\nendalign*\n\nthen the marginal distribution of mathbfX is textrmMT_np(numathbfMboldsymbolSigmaboldsymbolOmega).\n\n\n\n\n\n","category":"type"},{"location":"matrix/#Distributions.MatrixBeta","page":"Matrix-variate Distributions","title":"Distributions.MatrixBeta","text":"MatrixBeta(p, n1, n2)\n\np::Int    dimension\nn1::Real  degrees of freedom (greater than p - 1)\nn2::Real  degrees of freedom (greater than p - 1)\n\nThe matrix beta distribution generalizes the beta distribution to ptimes p real matrices mathbfU for which mathbfU and mathbfI_p-mathbfU are both positive definite. If mathbfUsim textrmMB_p(n_12 n_22), then its probability density function is\n\nf(mathbfU n_1n_2) = fracGamma_p(fracn_1+n_22)Gamma_p(fracn_12)Gamma_p(fracn_22)\nmathbfU^(n_1-p-1)2leftmathbfI_p-mathbfUright^(n_2-p-1)2\n\nIf mathbfS_1sim textrmW_p(n_1mathbfI_p) and mathbfS_2sim textrmW_p(n_2mathbfI_p) are independent, and we use mathcalL(cdot) to denote the lower Cholesky factor, then\n\nmathbfU=mathcalL(mathbfS_1+mathbfS_2)^-1mathbfS_1mathcalL(mathbfS_1+mathbfS_2)^-rmT\n\nhas mathbfUsim textrmMB_p(n_12 n_22).\n\n\n\n\n\n","category":"type"},{"location":"matrix/#Distributions.MatrixFDist","page":"Matrix-variate Distributions","title":"Distributions.MatrixFDist","text":"MatrixFDist(n1, n2, B)\n\nn1::Real          degrees of freedom (greater than p - 1)\nn2::Real          degrees of freedom (greater than p - 1)\nB::AbstractPDMat  p x p scale\n\nThe matrix F-distribution (sometimes called the matrix beta type II distribution) generalizes the F-Distribution to ptimes p real, positive definite matrices boldsymbolSigma. If boldsymbolSigmasim textrmMF_p(n_12n_22mathbfB), then its probability density function is\n\nf(boldsymbolSigma  n_1n_2mathbfB) =\nfracGamma_p(fracn_1+n_22)Gamma_p(fracn_12)Gamma_p(fracn_22)\nmathbfB^n_22boldsymbolSigma^(n_1-p-1)2mathbfB+boldsymbolSigma^-(n_1+n_2)2\n\nIf the joint distribution p(boldsymbolPsiboldsymbolSigma)=p(boldsymbolPsi)p(boldsymbolSigmaboldsymbolPsi) is given by\n\nbeginalign*\nboldsymbolPsisim textrmW_p(n_1 mathbfB)\nboldsymbolSigmaboldsymbolPsisim textrmIW_p(n_2 boldsymbolPsi)\nendalign*\n\nthen the marginal distribution of boldsymbolSigma is textrmMF_p(n_12n_22mathbfB).\n\n\n\n\n\n","category":"type"},{"location":"matrix/#Distributions.LKJ","page":"Matrix-variate Distributions","title":"Distributions.LKJ","text":"LKJ(d, η)\n\nd::Int   dimension\nη::Real  positive shape\n\nThe LKJ distribution is a distribution over dtimes d real correlation matrices (positive-definite matrices with ones on the diagonal). If mathbfRsim textrmLKJ_d(eta), then its probability density function is\n\nf(mathbfReta) = leftprod_k=1^d-1pi^frack2\nfracGammaleft(eta+fracd-1-k2right)Gammaleft(eta+fracd-12right)right^-1\nmathbfR^eta-1\n\nIf eta = 1, then the LKJ distribution is uniform over the space of correlation matrices.\n\n\n\n\n\n","category":"type"},{"location":"matrix/#Internal-Methods-(for-creating-your-own-matrix-variate-distributions)","page":"Matrix-variate Distributions","title":"Internal Methods (for creating your own matrix-variate distributions)","text":"","category":"section"},{"location":"matrix/","page":"Matrix-variate Distributions","title":"Matrix-variate Distributions","text":"Distributions._logpdf(d::MatrixDistribution, x::AbstractArray)","category":"page"},{"location":"matrix/#Distributions._logpdf-Tuple{Distribution{Matrixvariate,S} where S<:ValueSupport,AbstractArray}","page":"Matrix-variate Distributions","title":"Distributions._logpdf","text":"_logpdf(d::MatrixDistribution, x::AbstractArray)\n\nEvaluate logarithm of pdf value for a given sample x. This function need not perform dimension checking.\n\n\n\n\n\n","category":"method"},{"location":"extends/#Create-New-Samplers-and-Distributions","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"","category":"section"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Whereas this package already provides a large collection of common distributions out of box, there are still occasions where you want to create new distributions (e.g your application requires a special kind of distributions, or you want to contribute to this package).","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Generally, you don't have to implement every API method listed in the documentation. This package provides a series of generic functions that turn a small number of internal methods into user-end API methods. What you need to do is to implement this small set of internal methods for your distributions.","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"By default, Discrete sampleables have support of type Int while Continuous sampleables have support of type Float64. If this assumption does not hold for your new distribution or sampler, or its ValueSupport is neither Discrete nor Continuous, you should implement the eltype method in addition to the other methods listed below.","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Note: the methods need to be implemented are different for distributions of different variate forms.","category":"page"},{"location":"extends/#Create-a-Sampler","page":"Create New Samplers and Distributions","title":"Create a Sampler","text":"","category":"section"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Unlike a full fledged distributions, a sampler, in general, only provides limited functionalities, mainly to support sampling.","category":"page"},{"location":"extends/#Univariate-Sampler","page":"Create New Samplers and Distributions","title":"Univariate Sampler","text":"","category":"section"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"To implement a univariate sampler, one can define a sub type (say Spl) of Sampleable{Univariate,S} (where S can be Discrete or Continuous), and provide a rand method, as","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"function rand(rng::AbstractRNG, s::Spl)\n    # ... generate a single sample from s\nend","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"The package already implements a vectorized version of rand! and rand that repeatedly calls the scalar version to generate multiple samples; as wells as a one arg version that uses the default random number generator.","category":"page"},{"location":"extends/#Multivariate-Sampler","page":"Create New Samplers and Distributions","title":"Multivariate Sampler","text":"","category":"section"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"To implement a multivariate sampler, one can define a sub type of Sampleable{Multivariate,S}, and provide both length and _rand! methods, as","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Base.length(s::Spl) = ... # return the length of each sample\n\nfunction _rand!(rng::AbstractRNG, s::Spl, x::AbstractVector{T}) where T<:Real\n    # ... generate a single vector sample to x\nend","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"This function can assume that the dimension of x is correct, and doesn't need to perform dimension checking.","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"The package implements both rand and rand! as follows (which you don't need to implement in general):","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"function _rand!(rng::AbstractRNG, s::Sampleable{Multivariate}, A::DenseMatrix)\n    for i = 1:size(A,2)\n        _rand!(rng, s, view(A,:,i))\n    end\n    return A\nend\n\nfunction rand!(rng::AbstractRNG, s::Sampleable{Multivariate}, A::AbstractVector)\n    length(A) == length(s) ||\n        throw(DimensionMismatch(\"Output size inconsistent with sample length.\"))\n    _rand!(rng, s, A)\nend\n\nfunction rand!(rng::AbstractRNG, s::Sampleable{Multivariate}, A::DenseMatrix)\n    size(A,1) == length(s) ||\n        throw(DimensionMismatch(\"Output size inconsistent with sample length.\"))\n    _rand!(rng, s, A)\nend\n\nrand(rng::AbstractRNG, s::Sampleable{Multivariate,S}) where {S<:ValueSupport} =\n    _rand!(rng, s, Vector{eltype(S)}(length(s)))\n\nrand(rng::AbstractRNG, s::Sampleable{Multivariate,S}, n::Int) where {S<:ValueSupport} =\n    _rand!(rng, s, Matrix{eltype(S)}(length(s), n))","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"If there is a more efficient method to generate multiple vector samples in batch, one should provide the following method","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"function _rand!(rng::AbstractRNG, s::Spl, A::DenseMatrix{T}) where T<:Real\n    # ... generate multiple vector samples in batch\nend","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Remember that each column of A is a sample.","category":"page"},{"location":"extends/#Matrix-variate-Sampler","page":"Create New Samplers and Distributions","title":"Matrix-variate Sampler","text":"","category":"section"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"To implement a multivariate sampler, one can define a sub type of Sampleable{Multivariate,S}, and provide both size and _rand! method, as","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Base.size(s::Spl) = ... # the size of each matrix sample\n\nfunction _rand!(rng::AbstractRNG, s::Spl, x::DenseMatrix{T}) where T<:Real\n    # ... generate a single matrix sample to x\nend","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Note that you can assume x has correct dimensions in _rand! and don't have to perform dimension checking, the generic rand and rand! will do dimension checking and array allocation for you.","category":"page"},{"location":"extends/#Create-a-Distribution","page":"Create New Samplers and Distributions","title":"Create a Distribution","text":"","category":"section"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Most distributions should implement a sampler method to improve batch sampling efficiency.","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"sampler(d::Distribution)","category":"page"},{"location":"extends/#Distributions.sampler-Tuple{Distribution}","page":"Create New Samplers and Distributions","title":"Distributions.sampler","text":"sampler(d::Distribution) -> Sampleable\nsampler(s::Sampleable) -> s\n\nSamplers can often rely on pre-computed quantities (that are not parameters themselves) to improve efficiency. If such a sampler exists, it can be provided with this sampler method, which would be used for batch sampling. The general fallback is sampler(d::Distribution) = d.\n\n\n\n\n\n","category":"method"},{"location":"extends/#Univariate-Distribution","page":"Create New Samplers and Distributions","title":"Univariate Distribution","text":"","category":"section"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"A univariate distribution type should be defined as a subtype of DiscreteUnivarateDistribution or ContinuousUnivariateDistribution.","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Following methods need to be implemented for each univariate distribution type:","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"rand(::AbstractRNG, d::UnivariateDistribution)\nsampler(d::Distribution)\nlogpdf(d::UnivariateDistribution, x::Real)\ncdf(d::UnivariateDistribution, x::Real)\nquantile(d::UnivariateDistribution, q::Real)\nminimum(d::UnivariateDistribution)\nmaximum(d::UnivariateDistribution)\ninsupport(d::UnivariateDistribution, x::Real)","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"It is also recommended that one also implements the following statistics functions:","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"mean(d::UnivariateDistribution)\nvar(d::UnivariateDistribution)\nmodes(d::UnivariateDistribution)\nmode(d::UnivariateDistribution)\nskewness(d::UnivariateDistribution)\nkurtosis(d::Distribution, ::Bool)\nentropy(d::UnivariateDistribution, ::Real)\nmgf(d::UnivariateDistribution, ::Any)\ncf(d::UnivariateDistribution, ::Any)","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"You may refer to the source file src/univariates.jl to see details about how generic fallback functions for univariates are implemented.","category":"page"},{"location":"extends/#Create-a-Multivariate-Distribution","page":"Create New Samplers and Distributions","title":"Create a Multivariate Distribution","text":"","category":"section"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"A multivariate distribution type should be defined as a subtype of DiscreteMultivarateDistribution or ContinuousMultivariateDistribution.","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Following methods need to be implemented for each multivariate distribution type:","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"length(d::MultivariateDistribution)\nsampler(d::Distribution)\neltype(d::Distribution)\nDistributions._rand!(::AbstractRNG, d::MultivariateDistribution, x::AbstractArray)\nDistributions._logpdf(d::MultivariateDistribution, x::AbstractArray)","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Note that if there exists faster methods for batch evaluation, one should override _logpdf! and _pdf!.","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Furthermore, the generic loglikelihood function repeatedly calls _logpdf. If there is a better way to compute the log-likelihood, one should override loglikelihood.","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"It is also recommended that one also implements the following statistics functions:","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"mean(d::MultivariateDistribution)\nvar(d::MultivariateDistribution)\nentropy(d::MultivariateDistribution)\ncov(d::MultivariateDistribution)","category":"page"},{"location":"extends/#Create-a-Matrix-variate-Distribution","page":"Create New Samplers and Distributions","title":"Create a Matrix-variate Distribution","text":"","category":"section"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"A multivariate distribution type should be defined as a subtype of DiscreteMatrixDistribution or ContinuousMatrixDistribution.","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"Following methods need to be implemented for each matrix-variate distribution type:","category":"page"},{"location":"extends/","page":"Create New Samplers and Distributions","title":"Create New Samplers and Distributions","text":"size(d::MatrixDistribution)\nrand(d::MatrixDistribution)\nsampler(d::MatrixDistribution)\nDistributions._logpdf(d::MatrixDistribution, x::AbstractArray)","category":"page"},{"location":"univariate/#univariates","page":"Univariate Distributions","title":"Univariate Distributions","text":"","category":"section"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"Univariate distributions are the distributions whose variate forms are Univariate (i.e each sample is a scalar). Abstract types for univariate distributions:","category":"page"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"const UnivariateDistribution{S<:ValueSupport} = Distribution{Univariate,S}\n\nconst DiscreteUnivariateDistribution   = Distribution{Univariate, Discrete}\nconst ContinuousUnivariateDistribution = Distribution{Univariate, Continuous}","category":"page"},{"location":"univariate/#Common-Interface","page":"Univariate Distributions","title":"Common Interface","text":"","category":"section"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"A series of methods are implemented for each univariate distribution, which provide useful functionalities such as moment computation, pdf evaluation, and sampling (i.e. random number generation).","category":"page"},{"location":"univariate/#Parameter-Retrieval","page":"Univariate Distributions","title":"Parameter Retrieval","text":"","category":"section"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"Note: params are defined for all univariate distributions, while other parameter retrieval methods are only defined for those distributions for which these parameters make sense. See below for details.","category":"page"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"params(::UnivariateDistribution)\nscale(::UnivariateDistribution)\nlocation(::UnivariateDistribution)\nshape(::UnivariateDistribution)\nrate(::UnivariateDistribution)\nncategories(::UnivariateDistribution)\nntrials(::UnivariateDistribution)\ndof(::UnivariateDistribution)","category":"page"},{"location":"univariate/#StatsBase.params-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"StatsBase.params","text":"params(d::UnivariateDistribution)\n\nReturn a tuple of parameters. Let d be a distribution of type D, then D(params(d)...) will construct exactly the same distribution as d.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.scale-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Distributions.scale","text":"scale(d::UnivariateDistribution)\n\nGet the scale parameter.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.location-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Distributions.location","text":"location(d::UnivariateDistribution)\n\nGet the location parameter.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.shape-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Distributions.shape","text":"shape(d::UnivariateDistribution)\n\nGet the shape parameter.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.rate-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Distributions.rate","text":"rate(d::UnivariateDistribution)\n\nGet the rate parameter.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.ncategories-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Distributions.ncategories","text":"ncategories(d::UnivariateDistribution)\n\nGet the number of categories.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.ntrials-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Distributions.ntrials","text":"ntrials(d::UnivariateDistribution)\n\nGet the number of trials.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#StatsBase.dof-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"StatsBase.dof","text":"dof(d::UnivariateDistribution)\n\nGet the degrees of freedom.\n\n\n\n\n\n","category":"method"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"For distributions for which success and failure have a meaning, the following methods are defined:","category":"page"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"succprob(::DiscreteUnivariateDistribution)\nfailprob(::DiscreteUnivariateDistribution)","category":"page"},{"location":"univariate/#Distributions.succprob-Tuple{Distribution{Univariate,Discrete}}","page":"Univariate Distributions","title":"Distributions.succprob","text":"succprob(d::DiscreteUnivariateDistribution)\n\nGet the probability of success.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.failprob-Tuple{Distribution{Univariate,Discrete}}","page":"Univariate Distributions","title":"Distributions.failprob","text":"failprob(d::DiscreteUnivariateDistribution)\n\nGet the probability of failure.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Computation-of-statistics","page":"Univariate Distributions","title":"Computation of statistics","text":"","category":"section"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"maximum(::UnivariateDistribution)\nminimum(::UnivariateDistribution)\nextrema(::UnivariateDistribution)\nmean(::UnivariateDistribution)\nvar(::UnivariateDistribution)\nstd(::UnivariateDistribution)\nmedian(::UnivariateDistribution)\nmodes(::UnivariateDistribution)\nmode(::UnivariateDistribution)\nskewness(::UnivariateDistribution)\nkurtosis(::UnivariateDistribution)\nkurtosis(::Distribution, ::Bool)\nisplatykurtic(::UnivariateDistribution)\nisleptokurtic(::UnivariateDistribution)\nismesokurtic(::UnivariateDistribution)\nentropy(::UnivariateDistribution)\nentropy(::UnivariateDistribution, ::Bool)\nentropy(::UnivariateDistribution, ::Real)\nmgf(::UnivariateDistribution, ::Any)\ncf(::UnivariateDistribution, ::Any)","category":"page"},{"location":"univariate/#Base.maximum-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Base.maximum","text":"maximum(d::UnivariateDistribution)\n\nReturn the maximum of the support of d.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Base.minimum-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Base.minimum","text":"minimum(d::UnivariateDistribution)\n\nReturn the minimum of the support of d.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Base.extrema-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Base.extrema","text":"extrema(d::UnivariateDistribution)\n\nReturn the minimum and maximum of the support of d as a 2-tuple.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Statistics.mean-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Statistics.mean","text":"mean(d::UnivariateDistribution)\n\nCompute the expectation.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Statistics.var-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Statistics.var","text":"var(d::UnivariateDistribution)\n\nCompute the variance. (A generic std is provided as std(d) = sqrt(var(d)))\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Statistics.std-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Statistics.std","text":"std(d::UnivariateDistribution)\n\nReturn the standard deviation of distribution d, i.e. sqrt(var(d)).\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Statistics.median-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Statistics.median","text":"median(d::UnivariateDistribution)\n\nReturn the median value of distribution d.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#StatsBase.modes-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"StatsBase.modes","text":"modes(d::UnivariateDistribution)\n\nGet all modes (if this makes sense).\n\n\n\n\n\n","category":"method"},{"location":"univariate/#StatsBase.mode-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"StatsBase.mode","text":"mode(d::UnivariateDistribution)\n\nReturns the first mode.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#StatsBase.skewness-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"StatsBase.skewness","text":"skewness(d::UnivariateDistribution)\n\nCompute the skewness.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#StatsBase.kurtosis-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"StatsBase.kurtosis","text":"kurtosis(d::UnivariateDistribution)\n\nCompute the excessive kurtosis.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#StatsBase.kurtosis-Tuple{Distribution,Bool}","page":"Univariate Distributions","title":"StatsBase.kurtosis","text":"kurtosis(d::Distribution, correction::Bool)\n\nComputes excess kurtosis by default. Proper kurtosis can be returned with correction=false\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.isplatykurtic-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Distributions.isplatykurtic","text":"isplatykurtic(d)\n\nReturn whether d is platykurtic (i.e kurtosis(d) < 0).\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.isleptokurtic-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Distributions.isleptokurtic","text":"isleptokurtic(d)\n\nReturn whether d is leptokurtic (i.e kurtosis(d) > 0).\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.ismesokurtic-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Distributions.ismesokurtic","text":"ismesokurtic(d)\n\nReturn whether d is mesokurtic (i.e kurtosis(d) == 0).\n\n\n\n\n\n","category":"method"},{"location":"univariate/#StatsBase.entropy-Tuple{Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"StatsBase.entropy","text":"entropy(d::UnivariateDistribution)\n\nCompute the entropy value of distribution d.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#StatsBase.entropy-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Bool}","page":"Univariate Distributions","title":"StatsBase.entropy","text":"entropy(d::UnivariateDistribution, b::Real)\n\nCompute the entropy value of distribution d, w.r.t. a given base.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#StatsBase.entropy-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Real}","page":"Univariate Distributions","title":"StatsBase.entropy","text":"entropy(d::UnivariateDistribution, b::Real)\n\nCompute the entropy value of distribution d, w.r.t. a given base.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.mgf-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Any}","page":"Univariate Distributions","title":"Distributions.mgf","text":"mgf(d::UnivariateDistribution, t)\n\nEvaluate the moment generating function of distribution d.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.cf-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Any}","page":"Univariate Distributions","title":"Distributions.cf","text":"cf(d::UnivariateDistribution, t)\n\nEvaluate the characteristic function of distribution d.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Probability-Evaluation","page":"Univariate Distributions","title":"Probability Evaluation","text":"","category":"section"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"insupport(::UnivariateDistribution, x::Any)\npdf(::UnivariateDistribution, ::Real)\nlogpdf(::UnivariateDistribution, ::Real)\nloglikelihood(::UnivariateDistribution, ::Union{Real,AbstractArray})\ncdf(::UnivariateDistribution, ::Real)\nlogcdf(::UnivariateDistribution, ::Real)\nlogdiffcdf(::UnivariateDistribution, ::T, ::T) where {T <: Real}\nccdf(::UnivariateDistribution, ::Real)\nlogccdf(::UnivariateDistribution, ::Real)\nquantile(::UnivariateDistribution, ::Real)\ncquantile(::UnivariateDistribution, ::Real)\ninvlogcdf(::UnivariateDistribution, ::Real)\ninvlogccdf(::UnivariateDistribution, ::Real)","category":"page"},{"location":"univariate/#Distributions.insupport-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Any}","page":"Univariate Distributions","title":"Distributions.insupport","text":"insupport(d::UnivariateDistribution, x::Any)\n\nWhen x is a scalar, it returns whether x is within the support of d (e.g., insupport(d, x) = minimum(d) <= x <= maximum(d)). When x is an array, it returns whether every element in x is within the support of d.\n\nGeneric fallback methods are provided, but it is often the case that insupport can be done more efficiently, and a specialized insupport is thus desirable. You should also override this function if the support is composed of multiple disjoint intervals.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.pdf-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Real}","page":"Univariate Distributions","title":"Distributions.pdf","text":"pdf(d::UnivariateDistribution, x::Real)\n\nEvaluate the probability density (mass) at x.\n\nSee also: logpdf.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.logpdf-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Real}","page":"Univariate Distributions","title":"Distributions.logpdf","text":"logpdf(d::UnivariateDistribution, x::Real)\n\nEvaluate the logarithm of probability density (mass) at x.\n\nSee also: pdf.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.cdf-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Real}","page":"Univariate Distributions","title":"Distributions.cdf","text":"cdf(d::UnivariateDistribution, x::Real)\n\nEvaluate the cumulative probability at x.\n\nSee also ccdf, logcdf, and logccdf.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.logcdf-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Real}","page":"Univariate Distributions","title":"Distributions.logcdf","text":"logcdf(d::UnivariateDistribution, x::Real)\n\nThe logarithm of the cumulative function value(s) evaluated at x, i.e. log(cdf(x)).\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.ccdf-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Real}","page":"Univariate Distributions","title":"Distributions.ccdf","text":"ccdf(d::UnivariateDistribution, x::Real)\n\nThe complementary cumulative function evaluated at x, i.e. 1 - cdf(d, x).\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.logccdf-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Real}","page":"Univariate Distributions","title":"Distributions.logccdf","text":"logccdf(d::UnivariateDistribution, x::Real)\n\nThe logarithm of the complementary cumulative function values evaluated at x, i.e. log(ccdf(x)).\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Statistics.quantile-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Real}","page":"Univariate Distributions","title":"Statistics.quantile","text":"quantile(d::UnivariateDistribution, q::Real)\n\nEvaluate the inverse cumulative distribution function at q.\n\nSee also: cquantile, invlogcdf, and invlogccdf.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.cquantile-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Real}","page":"Univariate Distributions","title":"Distributions.cquantile","text":"cquantile(d::UnivariateDistribution, q::Real)\n\nThe complementary quantile value, i.e. quantile(d, 1-q).\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.invlogcdf-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Real}","page":"Univariate Distributions","title":"Distributions.invlogcdf","text":"invlogcdf(d::UnivariateDistribution, lp::Real)\n\nThe inverse function of logcdf.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Distributions.invlogccdf-Tuple{Distribution{Univariate,S} where S<:ValueSupport,Real}","page":"Univariate Distributions","title":"Distributions.invlogccdf","text":"invlogccdf(d::UnivariateDistribution, lp::Real)\n\nThe inverse function of logccdf.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Sampling-(Random-number-generation)","page":"Univariate Distributions","title":"Sampling (Random number generation)","text":"","category":"section"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"rand(::AbstractRNG, ::UnivariateDistribution)\nrand!(::AbstractRNG, ::UnivariateDistribution, ::AbstractArray)","category":"page"},{"location":"univariate/#Base.rand-Tuple{AbstractRNG,Distribution{Univariate,S} where S<:ValueSupport}","page":"Univariate Distributions","title":"Base.rand","text":"rand(rng::AbstractRNG, d::UnivariateDistribution)\n\nGenerate a scalar sample from d. The general fallback is quantile(d, rand()).\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Random.rand!-Tuple{AbstractRNG,Distribution{Univariate,S} where S<:ValueSupport,AbstractArray}","page":"Univariate Distributions","title":"Random.rand!","text":"rand!(rng::AbstractRNG, ::UnivariateDistribution, ::AbstractArray)\n\nSample a univariate distribution and store the results in the provided array.\n\n\n\n\n\n","category":"method"},{"location":"univariate/#Continuous-Distributions","page":"Univariate Distributions","title":"Continuous Distributions","text":"","category":"section"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"Arcsine\nBeta\nBetaPrime\nBiweight\nCauchy\nChernoff\nChi\nChisq\nCosine\nEpanechnikov\nErlang\nExponential\nFDist\nFrechet\nGamma\nGeneralizedExtremeValue\nGeneralizedPareto\nGumbel\nInverseGamma\nInverseGaussian\nKolmogorov\nKSDist\nKSOneSided\nLaplace\nLevy\nLocationScale\nLogistic\nLogitNormal\nLogNormal\nNoncentralBeta\nNoncentralChisq\nNoncentralF\nNoncentralT\nNormal\nNormalCanon\nNormalInverseGaussian\nPareto\nPGeneralizedGaussian\nRayleigh\nSemicircle\nStudentizedRange\nSymTriangularDist\nTDist\nTriangularDist\nTriweight\nUniform\nVonMises\nWeibull","category":"page"},{"location":"univariate/#Distributions.Arcsine","page":"Univariate Distributions","title":"Distributions.Arcsine","text":"Arcsine(a,b)\n\nThe Arcsine distribution has probability density function\n\nf(x) = frac1pi sqrt(x - a) (b - x) quad x in a b\n\nArcsine()        # Arcsine distribution with support [0, 1]\nArcsine(b)       # Arcsine distribution with support [0, b]\nArcsine(a, b)    # Arcsine distribution with support [a, b]\n\nparams(d)        # Get the parameters, i.e. (a, b)\nminimum(d)       # Get the lower bound, i.e. a\nmaximum(d)       # Get the upper bound, i.e. b\nlocation(d)      # Get the left bound, i.e. a\nscale(d)         # Get the span of the support, i.e. b - a\n\nExternal links\n\nArcsine distribution on Wikipedia\n\nUse Arcsine(a, b, check_args=false) to bypass argument checks.\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Beta","page":"Univariate Distributions","title":"Distributions.Beta","text":"Beta(α,β)\n\nThe Beta distribution has probability density function\n\nf(x alpha beta) = frac1B(alpha beta)\n x^alpha - 1 (1 - x)^beta - 1 quad x in 0 1\n\nThe Beta distribution is related to the Gamma distribution via the property that if X sim operatornameGamma(alpha) and Y sim operatornameGamma(beta) independently, then X  (X + Y) sim Beta(alpha beta).\n\nBeta()        # equivalent to Beta(1, 1)\nBeta(a)       # equivalent to Beta(a, a)\nBeta(a, b)    # Beta distribution with shape parameters a and b\n\nparams(d)     # Get the parameters, i.e. (a, b)\n\nExternal links\n\nBeta distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.BetaPrime","page":"Univariate Distributions","title":"Distributions.BetaPrime","text":"BetaPrime(α,β)\n\nThe Beta prime distribution has probability density function\n\nf(x alpha beta) = frac1B(alpha beta)\nx^alpha - 1 (1 + x)^- (alpha + beta) quad x  0\n\nThe Beta prime distribution is related to the Beta distribution via the relation ship that if X sim operatornameBeta(alpha beta) then fracX1 - X sim operatornameBetaPrime(alpha beta)\n\nBetaPrime()        # equivalent to BetaPrime(1, 1)\nBetaPrime(a)       # equivalent to BetaPrime(a, a)\nBetaPrime(a, b)    # Beta prime distribution with shape parameters a and b\n\nparams(d)          # Get the parameters, i.e. (a, b)\n\nExternal links\n\nBeta prime distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Biweight","page":"Univariate Distributions","title":"Distributions.Biweight","text":"Biweight(μ, σ)\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Cauchy","page":"Univariate Distributions","title":"Distributions.Cauchy","text":"Cauchy(μ, σ)\n\nThe Cauchy distribution with location μ and scale σ has probability density function\n\nf(x mu sigma) = frac1pi sigma left(1 + left(fracx - musigma right)^2 right)\n\nCauchy()         # Standard Cauchy distribution, i.e. Cauchy(0, 1)\nCauchy(u)        # Cauchy distribution with location u and unit scale, i.e. Cauchy(u, 1)\nCauchy(u, b)     # Cauchy distribution with location u and scale b\n\nparams(d)        # Get the parameters, i.e. (u, b)\nlocation(d)      # Get the location parameter, i.e. u\nscale(d)         # Get the scale parameter, i.e. b\n\nExternal links\n\nCauchy distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Chernoff","page":"Univariate Distributions","title":"Distributions.Chernoff","text":"Chernoff()\n\nThe Chernoff distribution is the distribution of the random variable\n\nundersett in (-inftyinfty)argmax ( G(t) - t^2 )\n\nwhere G is standard two–sided Brownian motion.\n\nThe distribution arises as the limit distribution of various cube-root-n consistent estimators, including the isotonic regression estimator of Brunk, the isotonic density estimator of Grenander, the least median of squares estimator of Rousseeuw, and the maximum score estimator of Manski.\n\nFor theoretical results, see e.g. Kim and Pollard, Annals of Statistics, 1990.  The code for the computation of pdf and cdf is based on the algorithm described in Groeneboom and Wellner, Journal of Computational and Graphical Statistics, 2001.\n\nChernoff()\npdf(Chernoff(),x::Real)\ncdf(Chernoff(),x::Real)\nlogpdf(Chernoff(),x::Real)\nsurvivor(Chernoff(),x::Real)\nmean(Chernoff())\nvar(Chernoff())\nskewness(Chernoff())\nkurtosis(Chernoff())\nkurtosis(Chernoff(), excess::Bool)\nmode(Chernoff())\nentropy(Chernoff())\nrand(Chernoff())\nrand(rng, Chernoff()\ncdf(Chernoff(),-x)              #For tail probabilities, use this instead of 1-cdf(Chernoff(),x)\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Chi","page":"Univariate Distributions","title":"Distributions.Chi","text":"Chi(ν)\n\nThe Chi distribution ν degrees of freedom has probability density function\n\nf(x k) = frac1Gamma(k2) 2^1 - k2 x^k-1 e^-x^22 quad x  0\n\nIt is the distribution of the square-root of a Chisq variate.\n\nChi(k)       # Chi distribution with k degrees of freedom\n\nparams(d)    # Get the parameters, i.e. (k,)\ndof(d)       # Get the degrees of freedom, i.e. k\n\nExternal links\n\nChi distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Chisq","page":"Univariate Distributions","title":"Distributions.Chisq","text":"Chisq(ν)\n\nThe Chi squared distribution (typically written χ²) with ν degrees of freedom has the probability density function\n\nf(x k) = fracx^k2 - 1 e^-x22^k2 Gamma(k2) quad x  0\n\nIf ν is an integer, then it is the distribution of the sum of squares of ν independent standard Normal variates.\n\nChisq(k)     # Chi-squared distribution with k degrees of freedom\n\nparams(d)    # Get the parameters, i.e. (k,)\ndof(d)       # Get the degrees of freedom, i.e. k\n\nExternal links\n\nChi-squared distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Cosine","page":"Univariate Distributions","title":"Distributions.Cosine","text":"Cosine(μ, σ)\n\nA raised Cosine distribution.\n\nExternal link:\n\nCosine distribution on wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Epanechnikov","page":"Univariate Distributions","title":"Distributions.Epanechnikov","text":"Epanechnikov(μ, σ)\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Erlang","page":"Univariate Distributions","title":"Distributions.Erlang","text":"Erlang(α,θ)\n\nThe Erlang distribution is a special case of a Gamma distribution with integer shape parameter.\n\nErlang()       # Erlang distribution with unit shape and unit scale, i.e. Erlang(1, 1)\nErlang(a)      # Erlang distribution with shape parameter a and unit scale, i.e. Erlang(a, 1)\nErlang(a, s)   # Erlang distribution with shape parameter a and scale s\n\nExternal links\n\nErlang distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Exponential","page":"Univariate Distributions","title":"Distributions.Exponential","text":"Exponential(θ)\n\nThe Exponential distribution with scale parameter θ has probability density function\n\nf(x theta) = frac1theta e^-fracxtheta quad x  0\n\nExponential()      # Exponential distribution with unit scale, i.e. Exponential(1)\nExponential(b)     # Exponential distribution with scale b\n\nparams(d)          # Get the parameters, i.e. (b,)\nscale(d)           # Get the scale parameter, i.e. b\nrate(d)            # Get the rate parameter, i.e. 1 / b\n\nExternal links\n\nExponential distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.FDist","page":"Univariate Distributions","title":"Distributions.FDist","text":"FDist(ν1, ν2)\n\nThe F distribution has probability density function\n\nf(x nu_1 nu_2) = frac1x B(nu_12 nu_22)\nsqrtfrac(nu_1 x)^nu_1 cdot nu_2^nu_2(nu_1 x + nu_2)^nu_1 + nu_2 quad x0\n\nIt is related to the Chisq distribution via the property that if X_1 sim operatornameChisq(nu_1) and X_2 sim operatornameChisq(nu_2), then (X_1nu_1)  (X_2  nu_2) sim operatornameFDist(nu_1 nu_2).\n\nFDist(ν1, ν2)     # F-Distribution with parameters ν1 and ν2\n\nparams(d)         # Get the parameters, i.e. (ν1, ν2)\n\nExternal links\n\nF distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Frechet","page":"Univariate Distributions","title":"Distributions.Frechet","text":"Frechet(α,θ)\n\nThe Fréchet distribution with shape α and scale θ has probability density function\n\nf(x alpha theta) = fracalphatheta left( fracxtheta right)^-alpha-1\ne^-(xtheta)^-alpha quad x  0\n\nFrechet()        # Fréchet distribution with unit shape and unit scale, i.e. Frechet(1, 1)\nFrechet(a)       # Fréchet distribution with shape a and unit scale, i.e. Frechet(a, 1)\nFrechet(a, b)    # Fréchet distribution with shape a and scale b\n\nparams(d)        # Get the parameters, i.e. (a, b)\nshape(d)         # Get the shape parameter, i.e. a\nscale(d)         # Get the scale parameter, i.e. b\n\nExternal links\n\nFréchet_distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Gamma","page":"Univariate Distributions","title":"Distributions.Gamma","text":"Gamma(α,θ)\n\nThe Gamma distribution with shape parameter α and scale θ has probability density function\n\nf(x alpha theta) = fracx^alpha-1 e^-xthetaGamma(alpha) theta^alpha\nquad x  0\n\nGamma()          # Gamma distribution with unit shape and unit scale, i.e. Gamma(1, 1)\nGamma(α)         # Gamma distribution with shape α and unit scale, i.e. Gamma(α, 1)\nGamma(α, θ)      # Gamma distribution with shape α and scale θ\n\nparams(d)        # Get the parameters, i.e. (α, θ)\nshape(d)         # Get the shape parameter, i.e. α\nscale(d)         # Get the scale parameter, i.e. θ\n\nExternal links\n\nGamma distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.GeneralizedExtremeValue","page":"Univariate Distributions","title":"Distributions.GeneralizedExtremeValue","text":"GeneralizedExtremeValue(μ, σ, ξ)\n\nThe Generalized extreme value distribution with shape parameter ξ, scale σ and location μ has probability density function\n\nf(x xi sigma mu) = begincases\n        frac1sigma left 1+left(fracx-musigmaright)xiright^-1xi-1 expleft-left 1+ left(fracx-musigmaright)xiright^-1xi right  textfor  xi neq 0  \n        frac1sigma expleft-fracx-musigmaright expleft-expleft-fracx-musigmarightright  textfor  xi = 0 \n    endcases\n\nfor\n\nx in begincases\n        left mu - fracsigmaxi + infty right)  textfor  xi  0 \n        left( - infty + infty right)  textfor  xi = 0 \n        left( - infty mu - fracsigmaxi right  textfor  xi  0\n    endcases\n\nGeneralizedExtremeValue(m, s, k)      # Generalized Pareto distribution with shape k, scale s and location m.\n\nparams(d)       # Get the parameters, i.e. (m, s, k)\nlocation(d)     # Get the location parameter, i.e. m\nscale(d)        # Get the scale parameter, i.e. s\nshape(d)        # Get the shape parameter, i.e. k (sometimes called c)\n\nExternal links\n\nGeneralized extreme value distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.GeneralizedPareto","page":"Univariate Distributions","title":"Distributions.GeneralizedPareto","text":"GeneralizedPareto(μ, σ, ξ)\n\nThe Generalized Pareto distribution with shape parameter ξ, scale σ and location μ has probability density function\n\nf(x mu sigma xi) = begincases\n        frac1sigma(1 + xi fracx - musigma )^-frac1xi - 1  textfor  xi neq 0 \n        frac1sigma e^-fracleft( x - mu right) sigma  textfor  xi = 0\n    endcases\n    quad x in begincases\n        left mu infty right  textfor  xi geq 0 \n        left mu mu - sigma  xi right  textfor  xi  0\n    endcases\n\nGeneralizedPareto()             # Generalized Pareto distribution with unit shape and unit scale, i.e. GeneralizedPareto(0, 1, 1)\nGeneralizedPareto(k, s)         # Generalized Pareto distribution with shape k and scale s, i.e. GeneralizedPareto(0, k, s)\nGeneralizedPareto(m, k, s)      # Generalized Pareto distribution with shape k, scale s and location m.\n\nparams(d)       # Get the parameters, i.e. (m, s, k)\nlocation(d)     # Get the location parameter, i.e. m\nscale(d)        # Get the scale parameter, i.e. s\nshape(d)        # Get the shape parameter, i.e. k\n\nExternal links\n\nGeneralized Pareto distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Gumbel","page":"Univariate Distributions","title":"Distributions.Gumbel","text":"Gumbel(μ, θ)\n\nThe Gumbel distribution  with location μ and scale θ has probability density function\n\nf(x mu theta) = frac1theta e^-(z + e^-z)\nquad text with  z = fracx - mutheta\n\nGumbel()            # Gumbel distribution with zero location and unit scale, i.e. Gumbel(0, 1)\nGumbel(u)           # Gumbel distribution with location u and unit scale, i.e. Gumbel(u, 1)\nGumbel(u, b)        # Gumbel distribution with location u and scale b\n\nparams(d)        # Get the parameters, i.e. (u, b)\nlocation(d)      # Get the location parameter, i.e. u\nscale(d)         # Get the scale parameter, i.e. b\n\nExternal links\n\nGumbel distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.InverseGamma","page":"Univariate Distributions","title":"Distributions.InverseGamma","text":"InverseGamma(α, θ)\n\nThe inverse Gamma distribution with shape parameter α and scale θ has probability density function\n\nf(x alpha theta) = fractheta^alpha x^-(alpha + 1)Gamma(alpha)\ne^-fracthetax quad x  0\n\nIt is related to the Gamma distribution: if X sim operatornameGamma(alpha beta), then 1  X sim operatornameInverseGamma(alpha beta^-1).\n\nInverseGamma()        # Inverse Gamma distribution with unit shape and unit scale, i.e. InverseGamma(1, 1)\nInverseGamma(α)       # Inverse Gamma distribution with shape α and unit scale, i.e. InverseGamma(α, 1)\nInverseGamma(α, θ)    # Inverse Gamma distribution with shape α and scale θ\n\nparams(d)        # Get the parameters, i.e. (α, θ)\nshape(d)         # Get the shape parameter, i.e. α\nscale(d)         # Get the scale parameter, i.e. θ\n\nExternal links\n\nInverse gamma distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.InverseGaussian","page":"Univariate Distributions","title":"Distributions.InverseGaussian","text":"InverseGaussian(μ,λ)\n\nThe inverse Gaussian distribution with mean μ and shape λ has probability density function\n\nf(x mu lambda) = sqrtfraclambda2pi x^3\nexpleft(frac-lambda(x-mu)^22mu^2xright) quad x  0\n\nInverseGaussian()              # Inverse Gaussian distribution with unit mean and unit shape, i.e. InverseGaussian(1, 1)\nInverseGaussian(mu),           # Inverse Gaussian distribution with mean mu and unit shape, i.e. InverseGaussian(u, 1)\nInverseGaussian(mu, lambda)    # Inverse Gaussian distribution with mean mu and shape lambda\n\nparams(d)           # Get the parameters, i.e. (mu, lambda)\nmean(d)             # Get the mean parameter, i.e. mu\nshape(d)            # Get the shape parameter, i.e. lambda\n\nExternal links\n\nInverse Gaussian distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Kolmogorov","page":"Univariate Distributions","title":"Distributions.Kolmogorov","text":"Kolmogorov()\n\nKolmogorov distribution defined as\n\nsup_t in 01 B(t)\n\nwhere B(t) is a Brownian bridge used in the Kolmogorov–Smirnov test for large n.\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.KSDist","page":"Univariate Distributions","title":"Distributions.KSDist","text":"KSDist(n)\n\nDistribution of the (two-sided) Kolmogorov-Smirnoff statistic\n\nD_n = sup_x  hatF_n(x) -F(x) sqrt(n)\n\nD_n converges a.s. to the Kolmogorov distribution.\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.KSOneSided","page":"Univariate Distributions","title":"Distributions.KSOneSided","text":"KSOneSided(n)\n\nDistribution of the one-sided Kolmogorov-Smirnov test statistic:\n\nD^+_n = sup_x (hatF_n(x) -F(x))\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Laplace","page":"Univariate Distributions","title":"Distributions.Laplace","text":"Laplace(μ,β)\n\nThe Laplace distribution with location μ and scale β has probability density function\n\nf(x mu beta) = frac12 beta exp left(- fracx - mubeta right)\n\nLaplace()       # Laplace distribution with zero location and unit scale, i.e. Laplace(0, 1)\nLaplace(μ)      # Laplace distribution with location μ and unit scale, i.e. Laplace(μ, 1)\nLaplace(μ, β)   # Laplace distribution with location μ and scale β\n\nparams(d)       # Get the parameters, i.e., (μ, β)\nlocation(d)     # Get the location parameter, i.e. μ\nscale(d)        # Get the scale parameter, i.e. β\n\nExternal links\n\nLaplace distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Levy","page":"Univariate Distributions","title":"Distributions.Levy","text":"Levy(μ, σ)\n\nThe Lévy distribution with location μ and scale σ has probability density function\n\nf(x mu sigma) = sqrtfracsigma2 pi (x - mu)^3\nexp left( - fracsigma2 (x - mu) right) quad x  mu\n\nLevy()         # Levy distribution with zero location and unit scale, i.e. Levy(0, 1)\nLevy(u)        # Levy distribution with location u and unit scale, i.e. Levy(u, 1)\nLevy(u, c)     # Levy distribution with location u ans scale c\n\nparams(d)      # Get the parameters, i.e. (u, c)\nlocation(d)    # Get the location parameter, i.e. u\n\nExternal links\n\nLévy distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.LocationScale","page":"Univariate Distributions","title":"Distributions.LocationScale","text":"LocationScale(μ,σ,ρ)\n\nA location-scale transformed distribution with location parameter μ, scale parameter σ, and given distribution ρ.\n\nf(x) = frac1σ ρ  left( fracx-μσ right)\n\nLocationScale(μ,σ,ρ) # location-scale transformed distribution\nparams(d)            # Get the parameters, i.e. (μ, σ, and the base distribution)\nlocation(d)          # Get the location parameter\nscale(d)             # Get the scale parameter\n\nExternal links Location-Scale family on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Logistic","page":"Univariate Distributions","title":"Distributions.Logistic","text":"Logistic(μ,θ)\n\nThe Logistic distribution with location μ and scale θ has probability density function\n\nf(x mu theta) = frac14 theta mathrmsech^2\nleft( fracx - mu2 theta right)\n\nLogistic()       # Logistic distribution with zero location and unit scale, i.e. Logistic(0, 1)\nLogistic(u)      # Logistic distribution with location u and unit scale, i.e. Logistic(u, 1)\nLogistic(u, b)   # Logistic distribution with location u ans scale b\n\nparams(d)       # Get the parameters, i.e. (u, b)\nlocation(d)     # Get the location parameter, i.e. u\nscale(d)        # Get the scale parameter, i.e. b\n\nExternal links\n\nLogistic distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.LogitNormal","page":"Univariate Distributions","title":"Distributions.LogitNormal","text":"LogitNormal(μ,σ)\n\nThe logit normal distribution is the distribution of of a random variable whose logit has a Normal distribution. Or inversely, when applying the logistic function to a Normal random variable then the resulting random variable follows a logit normal distribution.\n\nIf X sim operatornameNormal(mu sigma) then operatornamelogistic(X) sim operatornameLogitNormal(musigma).\n\nThe probability density function is\n\nf(x mu sigma) = frac1x sqrt2 pi sigma^2\nexp left( - frac(textlogit(x) - mu)^22 sigma^2 right)\nquad x  0\n\nwhere the logit-Function is\n\ntextlogit(x) = lnleft(fracx1-xright)\nquad 0  x  1\n\nLogitNormal()          # Logit-normal distribution with zero logit-mean and unit scale\nLogitNormal(mu)        # Logit-normal distribution with logit-mean mu and unit scale\nLogitNormal(mu, sig)   # Logit-normal distribution with logit-mean mu and scale sig\n\nparams(d)            # Get the parameters, i.e. (mu, sig)\nmedian(d)            # Get the median, i.e. logistic(mu)\n\nThe following properties have no analytical solution but numerical approximations. In order to avoid package dependencies for numerical optimization, they are currently not implemented.\n\nmean(d)\nvar(d)\nstd(d)\nmode(d)\n\nSimilarly, skewness, kurtosis, and entropy are not implemented.\n\nExternal links\n\nLogit normal distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.LogNormal","page":"Univariate Distributions","title":"Distributions.LogNormal","text":"LogNormal(μ,σ)\n\nThe log normal distribution is the distribution of the exponential of a Normal variate: if X sim operatornameNormal(mu sigma) then exp(X) sim operatornameLogNormal(musigma). The probability density function is\n\nf(x mu sigma) = frac1x sqrt2 pi sigma^2\nexp left( - frac(log(x) - mu)^22 sigma^2 right)\nquad x  0\n\nLogNormal()          # Log-normal distribution with zero log-mean and unit scale\nLogNormal(mu)        # Log-normal distribution with log-mean mu and unit scale\nLogNormal(mu, sig)   # Log-normal distribution with log-mean mu and scale sig\n\nparams(d)            # Get the parameters, i.e. (mu, sig)\nmeanlogx(d)          # Get the mean of log(X), i.e. mu\nvarlogx(d)           # Get the variance of log(X), i.e. sig^2\nstdlogx(d)           # Get the standard deviation of log(X), i.e. sig\n\nExternal links\n\nLog normal distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.NoncentralBeta","page":"Univariate Distributions","title":"Distributions.NoncentralBeta","text":"NoncentralBeta(α, β, λ)\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.NoncentralChisq","page":"Univariate Distributions","title":"Distributions.NoncentralChisq","text":"NoncentralChisq(ν, λ)\n\nThe noncentral chi-squared distribution with ν degrees of freedom and noncentrality parameter λ has the probability density function\n\nf(x nu lambda) = frac12 e^-(x + lambda)2 left( fracxlambda right)^nu4-12 I_nu2-1(sqrtlambda x) quad x  0\n\nIt is the distribution of the sum of squares of ν independent Normal variates with individual means mu_i and\n\nlambda = sum_i=1^nu mu_i^2\n\nNoncentralChisq(ν, λ)     # Noncentral chi-squared distribution with ν degrees of freedom and noncentrality parameter λ\n\nparams(d)    # Get the parameters, i.e. (ν, λ)\n\nExternal links\n\nNoncentral chi-squared distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.NoncentralF","page":"Univariate Distributions","title":"Distributions.NoncentralF","text":"NoncentralF(ν1, ν2, λ)\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.NoncentralT","page":"Univariate Distributions","title":"Distributions.NoncentralT","text":"NoncentralT(ν, λ)\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Normal","page":"Univariate Distributions","title":"Distributions.Normal","text":"Normal(μ,σ)\n\nThe Normal distribution with mean μ and standard deviation σ≥0 has probability density function\n\nf(x mu sigma) = frac1sqrt2 pi sigma^2\nexp left( - frac(x - mu)^22 sigma^2 right)\n\nNote that if σ == 0, then the distribution is a point mass concentrated at μ. Though not technically a continuous distribution, it is allowed so as to account for cases where σ may have underflowed, and the functions are defined by taking the pointwise limit as σ  0.\n\nNormal()          # standard Normal distribution with zero mean and unit variance\nNormal(mu)        # Normal distribution with mean mu and unit variance\nNormal(mu, sig)   # Normal distribution with mean mu and variance sig^2\n\nparams(d)         # Get the parameters, i.e. (mu, sig)\nmean(d)           # Get the mean, i.e. mu\nstd(d)            # Get the standard deviation, i.e. sig\n\nExternal links\n\nNormal distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.NormalCanon","page":"Univariate Distributions","title":"Distributions.NormalCanon","text":"NormalCanon(η, λ)\n\nCanonical Form of Normal distribution\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.NormalInverseGaussian","page":"Univariate Distributions","title":"Distributions.NormalInverseGaussian","text":"NormalInverseGaussian(μ,α,β,δ)\n\nThe Normal-inverse Gaussian distribution with location μ, tail heaviness α, asymmetry parameter β and scale δ has probability density function\n\nf(x mu alpha beta delta) = fracalphadelta K_1 left(alphasqrtdelta^2 + (x - mu)^2right)pi sqrtdelta^2 + (x - mu)^2  e^delta gamma + beta (x - mu)\n\nwhere K_j denotes a modified Bessel function of the third kind.\n\nExternal links\n\nNormal-inverse Gaussian distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Pareto","page":"Univariate Distributions","title":"Distributions.Pareto","text":"Pareto(α,θ)\n\nThe Pareto distribution with shape α and scale θ has probability density function\n\nf(x alpha theta) = fracalpha theta^alphax^alpha + 1 quad x ge theta\n\nPareto()            # Pareto distribution with unit shape and unit scale, i.e. Pareto(1, 1)\nPareto(a)           # Pareto distribution with shape a and unit scale, i.e. Pareto(a, 1)\nPareto(a, b)        # Pareto distribution with shape a and scale b\n\nparams(d)        # Get the parameters, i.e. (a, b)\nshape(d)         # Get the shape parameter, i.e. a\nscale(d)         # Get the scale parameter, i.e. b\n\nExternal links\n\nPareto distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.PGeneralizedGaussian","page":"Univariate Distributions","title":"Distributions.PGeneralizedGaussian","text":"PGeneralizedGaussian(α, μ, p)\n\nThe p-Generalized Gaussian distribution, more commonly known as the exponential power or the generalized normal distribution, with scale α, location μ, and shape p has the probability density function\n\nf(x mu alpha p) = fracp2alphaGamma(1p) e^-(fracx-mualpha)^p quad x in (-infty +infty)  alpha  0 p  0\n\nThe p-Generalized Gaussian (GGD) is a parametric distribution that incorporates the Normal and Laplacian distributions as special cases where p = 1 and p = 2. As p → ∞, the distribution approaches the Uniform distribution on [μ-α, μ+α].\n\nPGeneralizedGaussian()           # GGD with shape 2, scale 1, location 0, (the Normal distribution)\nPGeneralizedGaussian(loc,s,sh)   # GGD with location loc, scale s, and shape sh\n\nparams(d)                       # Get the parameters, i.e. (loc,s,sh,)\nshape(d)                        # Get the shape parameter, sh\nscale(d)                        # Get the scale parameter, s\nlocation(d)                     # Get the location parameter, loc\n\nExternal Links\n\nGeneralized Gaussian on Wikipedia\nReference implementation paper\n\n\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Rayleigh","page":"Univariate Distributions","title":"Distributions.Rayleigh","text":"Rayleigh(σ)\n\nThe Rayleigh distribution with scale σ has probability density function\n\nf(x sigma) = fracxsigma^2 e^-fracx^22 sigma^2 quad x  0\n\nIt is related to the Normal distribution via the property that if X Y sim operatornameNormal(0sigma), independently, then sqrtX^2 + Y^2 sim operatornameRayleigh(sigma).\n\nRayleigh()       # Rayleigh distribution with unit scale, i.e. Rayleigh(1)\nRayleigh(s)      # Rayleigh distribution with scale s\n\nparams(d)        # Get the parameters, i.e. (s,)\nscale(d)         # Get the scale parameter, i.e. s\n\nExternal links\n\nRayleigh distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Semicircle","page":"Univariate Distributions","title":"Distributions.Semicircle","text":"Semicircle(r)\n\nThe Wigner semicircle distribution with radius parameter r has probability density function\n\nf(x r) = frac2pi r^2 sqrtr^2 - x^2 quad x in -r r\n\nSemicircle(r)   # Wigner semicircle distribution with radius r\n\nparams(d)       # Get the radius parameter, i.e. (r,)\n\nExternal links\n\nWigner semicircle distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.StudentizedRange","page":"Univariate Distributions","title":"Distributions.StudentizedRange","text":"StudentizedRange(ν, k)\n\nThe studentized range distribution has probability density function:\n\nf(q k nu) = fracsqrt2pik(k - 1)nu^nu2Gammaleft(fracnu2right)2^nu2 - 1 int_0^infty x^nuphi(sqrtnux) leftint_-infty^infty phi(u)phi(u - qx)Phi(u) - Phi(u - qx)^k - 2durightdx\n\nwhere\n\nbeginalign*\nPhi(x) = frac1 + erf(fracxsqrt2)2 (textNormal Distribution CDF)\nphi(x) = Phi(x) (textNormal Distribution PDF)\nendalign*\n\nStudentizedRange(ν, k)     # Studentized Range Distribution with parameters ν and k\n\nparams(d)        # Get the parameters, i.e. (ν, k)\n\nExternal links\n\nStudentized range distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.SymTriangularDist","page":"Univariate Distributions","title":"Distributions.SymTriangularDist","text":"SymTriangularDist(μ,σ)\n\nThe Symmetric triangular distribution with location μ and scale σ has probability density function\n\nf(x mu sigma) = frac1sigma left( 1 - left fracx - musigma right right) quad mu - sigma le x le mu + sigma\n\nSymTriangularDist()         # Symmetric triangular distribution with zero location and unit scale\nSymTriangularDist(u)        # Symmetric triangular distribution with location u and unit scale\nSymTriangularDist(u, s)     # Symmetric triangular distribution with location u and scale s\n\nparams(d)       # Get the parameters, i.e. (u, s)\nlocation(d)     # Get the location parameter, i.e. u\nscale(d)        # Get the scale parameter, i.e. s\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.TDist","page":"Univariate Distributions","title":"Distributions.TDist","text":"TDist(ν)\n\nThe Students T distribution with ν degrees of freedom has probability density function\n\nf(x d) = frac1sqrtd B(12 d2)\nleft( 1 + fracx^2d right)^-fracd + 12\n\nTDist(d)      # t-distribution with d degrees of freedom\n\nparams(d)     # Get the parameters, i.e. (d,)\ndof(d)        # Get the degrees of freedom, i.e. d\n\nExternal links\n\nStudent's T distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.TriangularDist","page":"Univariate Distributions","title":"Distributions.TriangularDist","text":"TriangularDist(a,b,c)\n\nThe triangular distribution with lower limit a, upper limit b and mode c has probability density function\n\nf(x a b c)= begincases\n        0  mathrmfor  x  a \n        frac2(x-a)(b-a)(c-a)  mathrmfor  a le x leq c 4pt\n        frac2(b-x)(b-a)(b-c)  mathrmfor  c  x le b 4pt\n        0  mathrmfor  b  x\n        endcases\n\nTriangularDist(a, b)        # Triangular distribution with lower limit a, upper limit b, and mode (a+b)/2\nTriangularDist(a, b, c)     # Triangular distribution with lower limit a, upper limit b, and mode c\n\nparams(d)       # Get the parameters, i.e. (a, b, c)\nminimum(d)      # Get the lower bound, i.e. a\nmaximum(d)      # Get the upper bound, i.e. b\nmode(d)         # Get the mode, i.e. c\n\nExternal links\n\nTriangular distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Triweight","page":"Univariate Distributions","title":"Distributions.Triweight","text":"Triweight(μ, σ)\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Uniform","page":"Univariate Distributions","title":"Distributions.Uniform","text":"Uniform(a,b)\n\nThe continuous uniform distribution over an interval a b has probability density function\n\nf(x a b) = frac1b - a quad a le x le b\n\nUniform()        # Uniform distribution over [0, 1]\nUniform(a, b)    # Uniform distribution over [a, b]\n\nparams(d)        # Get the parameters, i.e. (a, b)\nminimum(d)       # Get the lower bound, i.e. a\nmaximum(d)       # Get the upper bound, i.e. b\nlocation(d)      # Get the location parameter, i.e. a\nscale(d)         # Get the scale parameter, i.e. b - a\n\nExternal links\n\nUniform distribution (continuous) on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.VonMises","page":"Univariate Distributions","title":"Distributions.VonMises","text":"VonMises(μ, κ)\n\nThe von Mises distribution with mean μ and concentration κ has probability density function\n\nf(x mu kappa) = frac12 pi I_0(kappa) exp left( kappa cos (x - mu) right)\n\nVonMises()       # von Mises distribution with zero mean and unit concentration\nVonMises(κ)      # von Mises distribution with zero mean and concentration κ\nVonMises(μ, κ)   # von Mises distribution with mean μ and concentration κ\n\nExternal links\n\nvon Mises distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Weibull","page":"Univariate Distributions","title":"Distributions.Weibull","text":"Weibull(α,θ)\n\nThe Weibull distribution with shape α and scale θ has probability density function\n\nf(x alpha theta) = fracalphatheta left( fracxtheta right)^alpha-1 e^-(xtheta)^alpha\n    quad x ge 0\n\nWeibull()        # Weibull distribution with unit shape and unit scale, i.e. Weibull(1, 1)\nWeibull(a)       # Weibull distribution with shape a and unit scale, i.e. Weibull(a, 1)\nWeibull(a, b)    # Weibull distribution with shape a and scale b\n\nparams(d)        # Get the parameters, i.e. (a, b)\nshape(d)         # Get the shape parameter, i.e. a\nscale(d)         # Get the scale parameter, i.e. b\n\nExternal links\n\nWeibull distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Discrete-Distributions","page":"Univariate Distributions","title":"Discrete Distributions","text":"","category":"section"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"Bernoulli\nBetaBinomial\nBinomial\nCategorical\nDiscreteUniform\nDiscreteNonParametric\nGeometric\nHypergeometric\nNegativeBinomial\nPoisson\nPoissonBinomial\nSkellam","category":"page"},{"location":"univariate/#Distributions.Bernoulli","page":"Univariate Distributions","title":"Distributions.Bernoulli","text":"Bernoulli(p)\n\nA Bernoulli distribution is parameterized by a success rate p, which takes value 1 with probability p and 0 with probability 1-p.\n\nP(X = k) = begincases\n1 - p  quad textfor  k = 0 \np  quad textfor  k = 1\nendcases\n\nBernoulli()    # Bernoulli distribution with p = 0.5\nBernoulli(p)   # Bernoulli distribution with success rate p\n\nparams(d)      # Get the parameters, i.e. (p,)\nsuccprob(d)    # Get the success rate, i.e. p\nfailprob(d)    # Get the failure rate, i.e. 1 - p\n\nExternal links:\n\nBernoulli distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.BetaBinomial","page":"Univariate Distributions","title":"Distributions.BetaBinomial","text":"BetaBinomial(n,α,β)\n\nA Beta-binomial distribution is the compound distribution of the Binomial distribution where the probability of success p is distributed according to the Beta. It has three parameters: n, the number of trials and two shape parameters α, β\n\nP(X = k) = n choose k B(k + alpha n - k + beta)  B(alpha beta)  quad text for  k = 012 ldots n\n\nBetaBinomial(n, a, b)      # BetaBinomial distribution with n trials and shape parameters a, b\n\nparams(d)       # Get the parameters, i.e. (n, a, b)\nntrials(d)      # Get the number of trials, i.e. n\n\nExternal links:\n\nBeta-binomial distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Binomial","page":"Univariate Distributions","title":"Distributions.Binomial","text":"Binomial(n,p)\n\nA Binomial distribution characterizes the number of successes in a sequence of independent trials. It has two parameters: n, the number of trials, and p, the probability of success in an individual trial, with the distribution:\n\nP(X = k) = n choose kp^k(1-p)^n-k  quad text for  k = 012 ldots n\n\nBinomial()      # Binomial distribution with n = 1 and p = 0.5\nBinomial(n)     # Binomial distribution for n trials with success rate p = 0.5\nBinomial(n, p)  # Binomial distribution for n trials with success rate p\n\nparams(d)       # Get the parameters, i.e. (n, p)\nntrials(d)      # Get the number of trials, i.e. n\nsuccprob(d)     # Get the success rate, i.e. p\nfailprob(d)     # Get the failure rate, i.e. 1 - p\n\nExternal links:\n\nBinomial distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Categorical","page":"Univariate Distributions","title":"Distributions.Categorical","text":"Categorical(p)\n\nA Categorical distribution is parameterized by a probability vector p (of length K).\n\nP(X = k) = pk  quad textfor  k = 1 2 ldots K\n\nCategorical(p)   # Categorical distribution with probability vector p\nparams(d)        # Get the parameters, i.e. (p,)\nprobs(d)         # Get the probability vector, i.e. p\nncategories(d)   # Get the number of categories, i.e. K\n\nHere, p must be a real vector, of which all components are nonnegative and sum to one.\n\nNote: The input vector p is directly used as a field of the constructed distribution, without being copied.\n\nCategorical is simply a type alias describing a special case of a DiscreteNonParametric distribution, so non-specialized methods defined for DiscreteNonParametric apply to Categorical as well.\n\nExternal links:\n\nCategorical distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.DiscreteUniform","page":"Univariate Distributions","title":"Distributions.DiscreteUniform","text":"DiscreteUniform(a,b)\n\nA Discrete uniform distribution is a uniform distribution over a consecutive sequence of integers between a and b, inclusive.\n\nP(X = k) = 1  (b - a + 1) quad textfor  k = a a+1 ldots b\n\nDiscreteUniform(a, b)   # a uniform distribution over {a, a+1, ..., b}\n\nparams(d)       # Get the parameters, i.e. (a, b)\nspan(d)         # Get the span of the support, i.e. (b - a + 1)\nprobval(d)      # Get the probability value, i.e. 1 / (b - a + 1)\nminimum(d)      # Return a\nmaximum(d)      # Return b\n\nExternal links\n\nDiscrete uniform distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.DiscreteNonParametric","page":"Univariate Distributions","title":"Distributions.DiscreteNonParametric","text":"DiscreteNonParametric(xs, ps)\n\nA Discrete nonparametric distribution explicitly defines an arbitrary probability mass function in terms of a list of real support values and their corresponding probabilities\n\nd = DiscreteNonParametric(xs, ps)\n\nparams(d)  # Get the parameters, i.e. (xs, ps)\nsupport(d) # Get a sorted AbstractVector describing the support (xs) of the distribution\nprobs(d)   # Get a Vector of the probabilities (ps) associated with the support\n\nExternal links\n\nProbability mass function on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Geometric","page":"Univariate Distributions","title":"Distributions.Geometric","text":"Geometric(p)\n\nA Geometric distribution characterizes the number of failures before the first success in a sequence of independent Bernoulli trials with success rate p.\n\nP(X = k) = p (1 - p)^k quad textfor  k = 0 1 2 ldots\n\nGeometric()    # Geometric distribution with success rate 0.5\nGeometric(p)   # Geometric distribution with success rate p\n\nparams(d)      # Get the parameters, i.e. (p,)\nsuccprob(d)    # Get the success rate, i.e. p\nfailprob(d)    # Get the failure rate, i.e. 1 - p\n\nExternal links\n\nGeometric distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Hypergeometric","page":"Univariate Distributions","title":"Distributions.Hypergeometric","text":"Hypergeometric(s, f, n)\n\nA Hypergeometric distribution describes the number of successes in n draws without replacement from a finite population containing s successes and f failures.\n\nP(X = k) = s choose k f choose n-kover s+f choose n quad textfor  k = max(0 n - f) ldots min(n s)\n\nHypergeometric(s, f, n)  # Hypergeometric distribution for a population with\n                         # s successes and f failures, and a sequence of n trials.\n\nparams(d)       # Get the parameters, i.e. (s, f, n)\n\nExternal links\n\nHypergeometric distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.NegativeBinomial","page":"Univariate Distributions","title":"Distributions.NegativeBinomial","text":"NegativeBinomial(r,p)\n\nA Negative binomial distribution describes the number of failures before the rth success in a sequence of independent Bernoulli trials. It is parameterized by r, the number of successes, and p, the probability of success in an individual trial.\n\nP(X = k) = k + r - 1 choose k p^r (1 - p)^k quad textfor  k = 012ldots\n\nThe distribution remains well-defined for any positive r, in which case\n\nP(X = k) = fracGamma(k+r)k Gamma(r) p^r (1 - p)^k quad textfor  k = 012ldots\n\nNegativeBinomial()        # Negative binomial distribution with r = 1 and p = 0.5\nNegativeBinomial(r, p)    # Negative binomial distribution with r successes and success rate p\n\nparams(d)       # Get the parameters, i.e. (r, p)\nsuccprob(d)     # Get the success rate, i.e. p\nfailprob(d)     # Get the failure rate, i.e. 1 - p\n\nExternal links:\n\nNegative binomial distribution on Wolfram\n\nNote: The definition of the negative binomial distribution in Wolfram is different from the Wikipedia definition. In Wikipedia, r is the number of failures and k is the number of successes.\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Poisson","page":"Univariate Distributions","title":"Distributions.Poisson","text":"Poisson(λ)\n\nA Poisson distribution descibes the number of independent events occurring within a unit time interval, given the average rate of occurrence λ.\n\nP(X = k) = fraclambda^kk e^-lambda quad text for  k = 012ldots\n\nPoisson()        # Poisson distribution with rate parameter 1\nPoisson(lambda)       # Poisson distribution with rate parameter lambda\n\nparams(d)        # Get the parameters, i.e. (λ,)\nmean(d)          # Get the mean arrival rate, i.e. λ\n\nExternal links:\n\nPoisson distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.PoissonBinomial","page":"Univariate Distributions","title":"Distributions.PoissonBinomial","text":"PoissonBinomial(p)\n\nA Poisson-binomial distribution describes the number of successes in a sequence of independent trials, wherein each trial has a different success rate. It is parameterized by a vector p (of length K), where K is the total number of trials and p[i] corresponds to the probability of success of the ith trial.\n\nP(X = k) = sumlimits_Ain F_k prodlimits_iin A pi prodlimits_jin A^c (1-pj) quad text for  k = 012ldotsK\n\nwhere F_k is the set of all subsets of k integers that can be selected from 123K.\n\nPoissonBinomial(p)   # Poisson Binomial distribution with success rate vector p\n\nparams(d)            # Get the parameters, i.e. (p,)\nsuccprob(d)          # Get the vector of success rates, i.e. p\nfailprob(d)          # Get the vector of failure rates, i.e. 1-p\n\nExternal links:\n\nPoisson-binomial distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Distributions.Skellam","page":"Univariate Distributions","title":"Distributions.Skellam","text":"Skellam(μ1, μ2)\n\nA Skellam distribution describes the difference between two independent Poisson variables, respectively with rate μ1 and μ2.\n\nP(X = k) = e^-(mu_1 + mu_2) left( fracmu_1mu_2 right)^k2 I_k(2 sqrtmu_1 mu_2) quad textfor integer  k\n\nwhere I_k is the modified Bessel function of the first kind.\n\nSkellam(mu1, mu2)   # Skellam distribution for the difference between two Poisson variables,\n                    # respectively with expected values mu1 and mu2.\n\nparams(d)           # Get the parameters, i.e. (mu1, mu2)\n\nExternal links:\n\nSkellam distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"univariate/#Vectorized-evaluation","page":"Univariate Distributions","title":"Vectorized evaluation","text":"","category":"section"},{"location":"univariate/","page":"Univariate Distributions","title":"Univariate Distributions","text":"Vectorized computation and inplace vectorized computation have been deprecated.","category":"page"},{"location":"truncate/#Truncated-Distributions","page":"Truncated Distributions","title":"Truncated Distributions","text":"","category":"section"},{"location":"truncate/","page":"Truncated Distributions","title":"Truncated Distributions","text":"The package provides the truncated function which creates the most appropriate distribution to represent a truncated version of a given distribution.","category":"page"},{"location":"truncate/","page":"Truncated Distributions","title":"Truncated Distributions","text":"A truncated distribution can be constructed using the following signature:","category":"page"},{"location":"truncate/","page":"Truncated Distributions","title":"Truncated Distributions","text":"truncated","category":"page"},{"location":"truncate/#Distributions.truncated","page":"Truncated Distributions","title":"Distributions.truncated","text":"truncated(d, l, u):\n\nTruncate a distribution between l and u. Builds the most appropriate distribution for the type of d, the fallback is constructing a Truncated wrapper.\n\nTo implement a specialized truncated form for a distribution D, the method truncate(d::D, l::T, u::T) where {T <: Real} should be implemented.\n\nArguments\n\nd::UnivariateDistribution: The original distribution.\nl::Real: The lower bound of the truncation, which can be a finite value or -Inf.\nu::Real: The upper bound of the truncation, which can be a finite value of Inf.\n\nThrows an error if l >= u.\n\n\n\n\n\n","category":"function"},{"location":"truncate/","page":"Truncated Distributions","title":"Truncated Distributions","text":"In the general case, this will create a Truncated{typeof(d)} structure, defined as follows:","category":"page"},{"location":"truncate/","page":"Truncated Distributions","title":"Truncated Distributions","text":"Truncated","category":"page"},{"location":"truncate/#Distributions.Truncated","page":"Truncated Distributions","title":"Distributions.Truncated","text":"Truncated(d, l, u):\n\nCreate a generic wrapper for a truncated distribution. Prefer calling the function truncated(d, l, u), which can choose the appropriate representation of the truncated distribution.\n\nArguments\n\nd::UnivariateDistribution: The original distribution.\nl::Real: The lower bound of the truncation, which can be a finite value or -Inf.\nu::Real: The upper bound of the truncation, which can be a finite value of Inf.\n\n\n\n\n\n","category":"type"},{"location":"truncate/","page":"Truncated Distributions","title":"Truncated Distributions","text":"Many functions, including those for the evaluation of pdf and sampling, are defined for all truncated univariate distributions:","category":"page"},{"location":"truncate/","page":"Truncated Distributions","title":"Truncated Distributions","text":"maximum(::UnivariateDistribution)\nminimum(::UnivariateDistribution)\ninsupport(::UnivariateDistribution, x::Any)\npdf(::UnivariateDistribution, ::Real)\nlogpdf(::UnivariateDistribution, ::Real)\ncdf(::UnivariateDistribution, ::Real)\nlogcdf(::UnivariateDistribution, ::Real)\nlogdiffcdf(::UnivariateDistribution, ::T, ::T) where {T <: Real}\nccdf(::UnivariateDistribution, ::Real)\nlogccdf(::UnivariateDistribution, ::Real)\nquantile(::UnivariateDistribution, ::Real)\ncquantile(::UnivariateDistribution, ::Real)\ninvlogcdf(::UnivariateDistribution, ::Real)\ninvlogccdf(::UnivariateDistribution, ::Real)\nrand(::UnivariateDistribution)\nrand!(::UnivariateDistribution, ::AbstractArray)\nmedian(::UnivariateDistribution)","category":"page"},{"location":"truncate/","page":"Truncated Distributions","title":"Truncated Distributions","text":"Functions to compute statistics, such as mean, mode, var, std, and entropy, are not available for generic truncated distributions. Generally, there are no easy ways to compute such quantities due to the complications incurred by truncation. However, these methods are supported for truncated normal distributions Truncated{<:Normal}.","category":"page"},{"location":"truncate/","page":"Truncated Distributions","title":"Truncated Distributions","text":"TruncatedNormal","category":"page"},{"location":"truncate/#Distributions.TruncatedNormal","page":"Truncated Distributions","title":"Distributions.TruncatedNormal","text":"TruncatedNormal(mu, sigma, l, u)\n\nThe truncated normal distribution is a particularly important one in the family of truncated distributions. We provide additional support for this type with TruncatedNormal which calls Truncated(Normal(mu, sigma), l, u). Unlike the general case, truncated normal distributions support mean, mode, modes, var, std, and entropy.\n\n\n\n\n\n","category":"function"},{"location":"fit/#Distribution-Fitting","page":"Distribution Fitting","title":"Distribution Fitting","text":"","category":"section"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"This package provides methods to fit a distribution to a given set of samples. Generally, one may write","category":"page"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"d = fit(D, x)","category":"page"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"This statement fits a distribution of type D to a given dataset x, where x should be an array comprised of all samples. The fit function will choose a reasonable way to fit the distribution, which, in most cases, is maximum likelihood estimation.","category":"page"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"note: Note\nOne can use as first argument simply the distribution name, like Binomial, or a concrete distribution with a type parameter, like Normal{Float64} or Exponential{Float32}.  However, in the latter case the type parameter of the distribution will be ignored:julia> fit(Cauchy{Float32}, collect(-4:4))\nCauchy{Float64}(μ=0.0, σ=2.0)","category":"page"},{"location":"fit/#Maximum-Likelihood-Estimation","page":"Distribution Fitting","title":"Maximum Likelihood Estimation","text":"","category":"section"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"The function fit_mle is for maximum likelihood estimation.","category":"page"},{"location":"fit/#Synopsis","page":"Distribution Fitting","title":"Synopsis","text":"","category":"section"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"fit_mle(D, x)\nfit_mle(D, x, w)","category":"page"},{"location":"fit/#Distributions.fit_mle-Tuple{Any,Any}","page":"Distribution Fitting","title":"Distributions.fit_mle","text":"fit_mle(D, x)\n\nFit a distribution of type D to a given data set x.\n\nFor univariate distribution, x can be an array of arbitrary size.\nFor multivariate distribution, x should be a matrix, where each column is a sample.\n\n\n\n\n\n","category":"method"},{"location":"fit/#Distributions.fit_mle-Tuple{Any,Any,Any}","page":"Distribution Fitting","title":"Distributions.fit_mle","text":"fit_mle(D, x, w)\n\nFit a distribution of type D to a weighted data set x, with weights given by w.\n\nHere, w should be an array with length n, where n is the number of samples contained in x.\n\n\n\n\n\n","category":"method"},{"location":"fit/#Applicable-distributions","page":"Distribution Fitting","title":"Applicable distributions","text":"","category":"section"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"The fit_mle method has been implemented for the following distributions:","category":"page"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"Univariate:","category":"page"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"Bernoulli\nBinomial\nCategorical\nDiscreteUniform\nExponential\nLogNormal\nNormal\nGamma\nGeometric\nLaplace\nPareto\nPoisson\nRayleigh\nInverseGaussian\nUniform","category":"page"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"Multivariate:","category":"page"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"Multinomial\nMvNormal\nDirichlet","category":"page"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"For most of these distributions, the usage is as described above. For a few special distributions that require additional information for estimation, we have to use modified interface:","category":"page"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"fit_mle(Binomial, n, x)        # n is the number of trials in each experiment\nfit_mle(Binomial, n, x, w)\n\nfit_mle(Categorical, k, x)     # k is the space size (i.e. the number of distinct values)\nfit_mle(Categorical, k, x, w)\n\nfit_mle(Categorical, x)        # equivalent to fit_mle(Categorical, max(x), x)\nfit_mle(Categorical, x, w)","category":"page"},{"location":"fit/#Sufficient-Statistics","page":"Distribution Fitting","title":"Sufficient Statistics","text":"","category":"section"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"For many distributions, estimation can be based on (sum of) sufficient statistics computed from a dataset. To simplify implementation, for such distributions, we implement suffstats method instead of fit_mle directly:","category":"page"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"ss = suffstats(D, x)        # ss captures the sufficient statistics of x\nss = suffstats(D, x, w)     # ss captures the sufficient statistics of a weighted dataset\n\nd = fit_mle(D, ss)          # maximum likelihood estimation based on sufficient stats","category":"page"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"When fit_mle on D is invoked, a fallback fit_mle method will first call suffstats to compute the sufficient statistics, and then a fit_mle method on sufficient statistics to get the result. For some distributions, this way is not the most efficient, and we specialize the fit_mle method to implement more efficient estimation algorithms.","category":"page"},{"location":"fit/#Maximum-a-Posteriori-Estimation","page":"Distribution Fitting","title":"Maximum-a-Posteriori Estimation","text":"","category":"section"},{"location":"fit/","page":"Distribution Fitting","title":"Distribution Fitting","text":"Maximum-a-Posteriori (MAP) estimation is also supported by this package, which is implemented as part of the conjugate exponential family framework (see :ref:Conjugate Prior and Posterior <ref-conj>).","category":"page"},{"location":"mixture/#Mixture-Models","page":"Mixture Models","title":"Mixture Models","text":"","category":"section"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"A mixture model is a probabilistic distribution that combines a set of component to represent the overall distribution. Generally, the probability density/mass function is given by a convex combination of the pdf/pmf of individual components, as","category":"page"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"f_mix(x Theta pi) = sum_k=1^K pi_k f(x theta_k)","category":"page"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"A mixture model is characterized by a set of component parameters Theta=theta_1 ldots theta_K and a prior distribution pi over these components.","category":"page"},{"location":"mixture/#Type-Hierarchy","page":"Mixture Models","title":"Type Hierarchy","text":"","category":"section"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"This package introduces a type MixtureModel, defined as follows, to represent a mixture model:","category":"page"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"abstract type AbstractMixtureModel{VF<:VariateForm,VS<:ValueSupport} <: Distribution{VF, VS} end\n\nstruct MixtureModel{VF<:VariateForm,VS<:ValueSupport,Component<:Distribution} <: AbstractMixtureModel{VF,VS}\n    components::Vector{Component}\n    prior::Categorical\nend\n\nconst UnivariateMixture    = AbstractMixtureModel{Univariate}\nconst MultivariateMixture  = AbstractMixtureModel{Multivariate}","category":"page"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"Remarks:","category":"page"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"We introduce AbstractMixtureModel as a base type, which allows one to define a mixture model with different internal implementation, while still being able to leverage the common methods defined for AbstractMixtureModel.","category":"page"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"AbstractMixtureModel","category":"page"},{"location":"mixture/#Distributions.AbstractMixtureModel","page":"Mixture Models","title":"Distributions.AbstractMixtureModel","text":"All subtypes of AbstractMixtureModel should implement the following methods:\n\nncomponents(d): the number of components\ncomponent(d, k):  return the k-th component\nprobs(d):       return a vector of prior probabilities over components.\n\n\n\n\n\n","category":"type"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"The MixtureModel is a parametric type, with three type parameters:\nVF: the variate form, which can be Univariate, Multivariate, or Matrixvariate.\nVS: the value support, which can be Continuous or Discrete.\nComponent: the type of component distributions, e.g. Normal.\nWe define two aliases: UnivariateMixture and MultivariateMixture.","category":"page"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"With such a type system, the type for a mixture of univariate normal distributions can be written as","category":"page"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"MixtureModel{Univariate,Continuous,Normal}","category":"page"},{"location":"mixture/#Constructors","page":"Mixture Models","title":"Constructors","text":"","category":"section"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"MixtureModel","category":"page"},{"location":"mixture/#Distributions.MixtureModel","page":"Mixture Models","title":"Distributions.MixtureModel","text":"MixtureModel{VF<:VariateForm,VS<:ValueSupport,C<:Distribution,CT<:Real} A mixture of distributions, parametrized on:\n\nVF,VS variate and support\nC distribution family of the mixture\nCT the type for probabilities of the prior\n\n\n\n\n\n","category":"type"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"Examples","category":"page"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"# constructs a mixture of three normal distributions,\n# with prior probabilities [0.2, 0.5, 0.3]\nMixtureModel(Normal[\n   Normal(-2.0, 1.2),\n   Normal(0.0, 1.0),\n   Normal(3.0, 2.5)], [0.2, 0.5, 0.3])\n\n# if the components share the same prior, the prior vector can be omitted\nMixtureModel(Normal[\n   Normal(-2.0, 1.2),\n   Normal(0.0, 1.0),\n   Normal(3.0, 2.5)])\n\n# Since all components have the same type, we can use a simplified syntax\nMixtureModel(Normal, [(-2.0, 1.2), (0.0, 1.0), (3.0, 2.5)], [0.2, 0.5, 0.3])\n\n# Again, one can omit the prior vector when all components share the same prior\nMixtureModel(Normal, [(-2.0, 1.2), (0.0, 1.0), (3.0, 2.5)])\n\n# The following example shows how one can make a Gaussian mixture\n# where all components share the same unit variance\nMixtureModel(map(u -> Normal(u, 1.0), [-2.0, 0.0, 3.0]))","category":"page"},{"location":"mixture/#Common-Interface","page":"Mixture Models","title":"Common Interface","text":"","category":"section"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"All subtypes of AbstractMixtureModel (obviously including MixtureModel) provide the following two methods:","category":"page"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"components(::AbstractMixtureModel)\nprobs(::AbstractMixtureModel)\nDistributions.component_type(::AbstractMixtureModel)","category":"page"},{"location":"mixture/#Distributions.components-Tuple{AbstractMixtureModel}","page":"Mixture Models","title":"Distributions.components","text":"components(d::AbstractMixtureModel)\n\nGet a list of components of the mixture model d.\n\n\n\n\n\n","category":"method"},{"location":"mixture/#Distributions.probs-Tuple{AbstractMixtureModel}","page":"Mixture Models","title":"Distributions.probs","text":"probs(d::AbstractMixtureModel)\n\nGet the vector of prior probabilities of all components of d.\n\n\n\n\n\n","category":"method"},{"location":"mixture/#Distributions.component_type-Tuple{AbstractMixtureModel}","page":"Mixture Models","title":"Distributions.component_type","text":"component_type(d::AbstractMixtureModel)\n\nThe type of the components of d.\n\n\n\n\n\n","category":"method"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"In addition, for all subtypes of UnivariateMixture and MultivariateMixture, the following generic methods are provided:","category":"page"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"mean(::AbstractMixtureModel)\nvar(::UnivariateMixture)\nlength(::MultivariateMixture)\npdf(::AbstractMixtureModel, ::Any)\nlogpdf(::AbstractMixtureModel, ::Any)\nrand(::AbstractMixtureModel)\nrand!(::AbstractMixtureModel, ::AbstractArray)","category":"page"},{"location":"mixture/#Statistics.mean-Tuple{AbstractMixtureModel}","page":"Mixture Models","title":"Statistics.mean","text":"mean(d::Union{UnivariateMixture, MultivariateMixture})\n\nCompute the overall mean (expectation).\n\n\n\n\n\n","category":"method"},{"location":"mixture/#Statistics.var-Tuple{AbstractMixtureModel{Univariate,S,C} where C<:Distribution where S<:ValueSupport}","page":"Mixture Models","title":"Statistics.var","text":"var(d::UnivariateMixture)\n\nCompute the overall variance (only for UnivariateMixture).\n\n\n\n\n\n","category":"method"},{"location":"mixture/#Base.length-Tuple{AbstractMixtureModel{Multivariate,S,C} where C<:Distribution where S<:ValueSupport}","page":"Mixture Models","title":"Base.length","text":"length(d::MultivariateMixture)\n\nThe length of each sample (only for Multivariate).\n\n\n\n\n\n","category":"method"},{"location":"mixture/#Distributions.pdf-Tuple{AbstractMixtureModel,Any}","page":"Mixture Models","title":"Distributions.pdf","text":"pdf(d::Union{UnivariateMixture, MultivariateMixture}, x)\n\nEvaluate the (mixed) probability density function over x. Here, x can be a single sample or an array of multiple samples.\n\n\n\n\n\n","category":"method"},{"location":"mixture/#Distributions.logpdf-Tuple{AbstractMixtureModel,Any}","page":"Mixture Models","title":"Distributions.logpdf","text":"logpdf(d::Union{UnivariateMixture, MultivariateMixture}, x)\n\nEvaluate the logarithm of the (mixed) probability density function over x. Here, x can be a single sample or an array of multiple samples.\n\n\n\n\n\n","category":"method"},{"location":"mixture/#Base.rand-Tuple{AbstractMixtureModel}","page":"Mixture Models","title":"Base.rand","text":"rand(d::Union{UnivariateMixture, MultivariateMixture})\n\nDraw a sample from the mixture model d.\n\nrand(d::Union{UnivariateMixture, MultivariateMixture}, n)\n\nDraw n samples from d.\n\n\n\n\n\n","category":"method"},{"location":"mixture/#Random.rand!-Tuple{AbstractMixtureModel,AbstractArray}","page":"Mixture Models","title":"Random.rand!","text":"rand!(d::Union{UnivariateMixture, MultivariateMixture}, r::AbstactArray)\n\nDraw multiple samples from d and write them to r.\n\n\n\n\n\n","category":"method"},{"location":"mixture/#Estimation","page":"Mixture Models","title":"Estimation","text":"","category":"section"},{"location":"mixture/","page":"Mixture Models","title":"Mixture Models","text":"There are a number of methods for estimating of mixture models from data, and this problem remains an open research topic. This package does not provide facilities for estimating mixture models. One can resort to other packages, e.g. GaussianMixtures.jl, for this purpose.","category":"page"},{"location":"starting/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"starting/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"The Distributions package is available through the Julia package system by running Pkg.add(\"Distributions\"). Throughout, we assume that you have installed the package.","category":"page"},{"location":"starting/#Starting-With-a-Normal-Distribution","page":"Getting Started","title":"Starting With a Normal Distribution","text":"","category":"section"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"We start by drawing 100 observations from a standard-normal random variable.","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"The first step is to set up the environment:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"julia> using Random, Distributions\n\njulia> Random.seed!(123) # Setting the seed","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"Then, we create a standard-normal distribution d and obtain samples using rand:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"julia> d = Normal()\nNormal(μ=0.0, σ=1.0)\n\njulia> x = rand(d, 100)\n100-element Array{Float64,1}:\n  0.376264\n -0.405272\n ...","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"You can easily obtain the pdf, cdf, quantile, and many other functions for a distribution. For instance, the median (50th percentile) and the 95th percentile for the standard-normal distribution are given by:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"julia> quantile.(Normal(), [0.5, 0.95])\n2-element Array{Float64,1}:\n 0.0\n 1.64485","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"The normal distribution is parameterized by its mean and standard deviation. To draw random samples from a normal distribution with mean 1 and standard deviation 2, you write:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"julia> rand(Normal(1, 2), 100)","category":"page"},{"location":"starting/#Using-Other-Distributions","page":"Getting Started","title":"Using Other Distributions","text":"","category":"section"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"The package contains a large number of additional distributions of three main types:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"Univariate\nMultivariate\nMatrixvariate","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"Each type splits further into Discrete and Continuous.","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"For instance, you can define the following distributions (among many others):","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"julia> Binomial(p) # Discrete univariate\njulia> Cauchy(u, b)  # Continuous univariate\njulia> Multinomial(n, p) # Discrete multivariate\njulia> Wishart(nu, S) # Continuous matrix-variate","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"In addition, you can create truncated distributions from univariate distributions:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"julia> truncated(Normal(mu, sigma), l, u)","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"To find out which parameters are appropriate for a given distribution D, you can use fieldnames(D):","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"julia> fieldnames(Cauchy)\n2-element Array{Symbol,1}:\n :μ\n :β","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"This tells you that a Cauchy distribution is initialized with location μ and scale β.","category":"page"},{"location":"starting/#Estimate-the-Parameters","page":"Getting Started","title":"Estimate the Parameters","text":"","category":"section"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"It is often useful to approximate an empirical distribution with a theoretical distribution. As an example, we can use the array x we created above and ask which normal distribution best describes it:","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"julia> fit(Normal, x)\nNormal(μ=0.036692077201688635, σ=1.1228280164716382)","category":"page"},{"location":"starting/","page":"Getting Started","title":"Getting Started","text":"Since x is a random draw from Normal, it's easy to check that the fitted values are sensible. Indeed, the estimates [0.04, 1.12] are close to the true values of [0.0, 1.0] that we used to generate x.","category":"page"},{"location":"#Distributions-Package","page":"Distributions Package","title":"Distributions Package","text":"","category":"section"},{"location":"","page":"Distributions Package","title":"Distributions Package","text":"The Distributions package provides a large collection of probabilistic distributions and related functions. Particularly, Distributions implements:","category":"page"},{"location":"","page":"Distributions Package","title":"Distributions Package","text":"Sampling from distributions\nMoments (e.g mean, variance, skewness, and kurtosis), entropy, and other properties\nProbability density/mass functions (pdf) and their logarithm (logpdf)\nMoment-generating functions and characteristic functions\nMaximum likelihood estimation\nDistribution composition (Cartesian product of distributions, truncated distributions)","category":"page"},{"location":"multivariate/#multivariates","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"","category":"section"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"Multivariate distributions are the distributions whose variate forms are Multivariate (i.e each sample is a vector). Abstract types for multivariate distributions:","category":"page"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"const MultivariateDistribution{S<:ValueSupport} = Distribution{Multivariate,S}\n\nconst DiscreteMultivariateDistribution   = Distribution{Multivariate, Discrete}\nconst ContinuousMultivariateDistribution = Distribution{Multivariate, Continuous}","category":"page"},{"location":"multivariate/#Common-Interface","page":"Multivariate Distributions","title":"Common Interface","text":"","category":"section"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"The methods listed as below are implemented for each multivariate distribution, which provides a consistent interface to work with multivariate distributions.","category":"page"},{"location":"multivariate/#Computation-of-statistics","page":"Multivariate Distributions","title":"Computation of statistics","text":"","category":"section"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"length(::MultivariateDistribution)\nsize(::MultivariateDistribution)\neltype(::Type{MultivariateDistribution})\nmean(::MultivariateDistribution)\nvar(::MultivariateDistribution)\ncov(::MultivariateDistribution)\ncor(::MultivariateDistribution)\nentropy(::MultivariateDistribution)\nentropy(::MultivariateDistribution, ::Real)","category":"page"},{"location":"multivariate/#Base.length-Tuple{Distribution{Multivariate,S} where S<:ValueSupport}","page":"Multivariate Distributions","title":"Base.length","text":"length(d::MultivariateDistribution) -> Int\n\nReturn the sample dimension of distribution d.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Base.size-Tuple{Distribution{Multivariate,S} where S<:ValueSupport}","page":"Multivariate Distributions","title":"Base.size","text":"size(d::MultivariateDistribution)\n\nReturn the sample size of distribution d, i.e (length(d),).\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Base.eltype-Tuple{Type{Distribution{Multivariate,S} where S<:ValueSupport}}","page":"Multivariate Distributions","title":"Base.eltype","text":"eltype(::Type{Sampleable})\n\nThe default element type of a sample. This is the type of elements of the samples generated by the rand method. However, one can provide an array of different element types to store the samples using rand!.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Statistics.mean-Tuple{Distribution{Multivariate,S} where S<:ValueSupport}","page":"Multivariate Distributions","title":"Statistics.mean","text":"mean(d::MultivariateDistribution)\n\nCompute the mean vector of distribution d.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Statistics.var-Tuple{Distribution{Multivariate,S} where S<:ValueSupport}","page":"Multivariate Distributions","title":"Statistics.var","text":"var(d::MultivariateDistribution)\n\nCompute the vector of element-wise variances for distribution d.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Statistics.cov-Tuple{Distribution{Multivariate,S} where S<:ValueSupport}","page":"Multivariate Distributions","title":"Statistics.cov","text":"cov(d::MultivariateDistribution)\n\nCompute the covariance matrix for distribution d. (cor is provided based on cov).\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Statistics.cor-Tuple{Distribution{Multivariate,S} where S<:ValueSupport}","page":"Multivariate Distributions","title":"Statistics.cor","text":"cor(d::MultivariateDistribution)\n\nComputes the correlation matrix for distribution d.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#StatsBase.entropy-Tuple{Distribution{Multivariate,S} where S<:ValueSupport}","page":"Multivariate Distributions","title":"StatsBase.entropy","text":"entropy(d::MultivariateDistribution)\n\nCompute the entropy value of distribution d.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#StatsBase.entropy-Tuple{Distribution{Multivariate,S} where S<:ValueSupport,Real}","page":"Multivariate Distributions","title":"StatsBase.entropy","text":"entropy(d::MultivariateDistribution, b::Real)\n\nCompute the entropy value of distribution d, w.r.t. a given base.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Probability-evaluation","page":"Multivariate Distributions","title":"Probability evaluation","text":"","category":"section"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"insupport(::MultivariateDistribution, ::AbstractArray)\npdf(::MultivariateDistribution, ::AbstractArray)\nlogpdf(::MultivariateDistribution, ::AbstractArray)\nloglikelihood(::MultivariateDistribution, ::AbstractArray)","category":"page"},{"location":"multivariate/#Distributions.insupport-Tuple{Distribution{Multivariate,S} where S<:ValueSupport,AbstractArray}","page":"Multivariate Distributions","title":"Distributions.insupport","text":"insupport(d::MultivariateDistribution, x::AbstractArray)\n\nIf x is a vector, it returns whether x is within the support of d. If x is a matrix, it returns whether every column in x is within the support of d.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Distributions.pdf-Tuple{Distribution{Multivariate,S} where S<:ValueSupport,AbstractArray}","page":"Multivariate Distributions","title":"Distributions.pdf","text":"pdf(d::MultivariateDistribution, x::AbstractArray)\n\nReturn the probability density of distribution d evaluated at x.\n\nIf x is a vector, it returns the result as a scalar.\nIf x is a matrix with n columns, it returns a vector r of length n, where r[i] corresponds\n\nto x[:,i] (i.e. treating each column as a sample).\n\npdf!(r, d, x) will write the results to a pre-allocated array r.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Distributions.logpdf-Tuple{Distribution{Multivariate,S} where S<:ValueSupport,AbstractArray}","page":"Multivariate Distributions","title":"Distributions.logpdf","text":"logpdf(d::MultivariateDistribution, x::AbstractArray)\n\nReturn the logarithm of probability density evaluated at x.\n\nIf x is a vector, it returns the result as a scalar.\nIf x is a matrix with n columns, it returns a vector r of length n, where r[i] corresponds to x[:,i].\n\nlogpdf!(r, d, x) will write the results to a pre-allocated array r.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"Note: For multivariate distributions, the pdf value is usually very small or large, and therefore direct evaluating the pdf may cause numerical problems. It is generally advisable to perform probability computation in log-scale.","category":"page"},{"location":"multivariate/#Sampling","page":"Multivariate Distributions","title":"Sampling","text":"","category":"section"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"rand(rng::AbstractRNG, ::MultivariateDistribution)\nrand!(rng::AbstractRNG, d::MultivariateDistribution, x::AbstractArray)","category":"page"},{"location":"multivariate/#Base.rand-Tuple{AbstractRNG,Distribution{Multivariate,S} where S<:ValueSupport}","page":"Multivariate Distributions","title":"Base.rand","text":"rand(::AbstractRNG, ::Sampleable)\n\nSamples from the sampler and returns the result.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Random.rand!-Tuple{AbstractRNG,Distribution{Multivariate,S} where S<:ValueSupport,AbstractArray}","page":"Multivariate Distributions","title":"Random.rand!","text":"rand!([rng::AbstractRNG,] d::MultivariateDistribution, x::AbstractArray)\n\nDraw samples and output them to a pre-allocated array x. Here, x can be either a vector of length dim(d) or a matrix with dim(d) rows.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"Note: In addition to these common methods, each multivariate distribution has its own special methods, as introduced below.","category":"page"},{"location":"multivariate/#Distributions","page":"Multivariate Distributions","title":"Distributions","text":"","category":"section"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"Multinomial\nDistributions.AbstractMvNormal\nMvNormal\nMvNormalCanon\nMvLogNormal\nDirichlet\nProduct","category":"page"},{"location":"multivariate/#Distributions.Multinomial","page":"Multivariate Distributions","title":"Distributions.Multinomial","text":"The Multinomial distribution generalizes the binomial distribution. Consider n independent draws from a Categorical distribution over a finite set of size k, and let X = (X_1  X_k) where X_i represents the number of times the element i occurs, then the distribution of X is a multinomial distribution. Each sample of a multinomial distribution is a k-dimensional integer vector that sums to n.\n\nThe probability mass function is given by\n\nf(x n p) = fracnx_1 cdots x_k prod_i=1^k p_i^x_i\nquad x_1 + cdots + x_k = n\n\nMultinomial(n, p)   # Multinomial distribution for n trials with probability vector p\nMultinomial(n, k)   # Multinomial distribution for n trials with equal probabilities\n                    # over 1:k\n\n\n\n\n\n","category":"type"},{"location":"multivariate/#Distributions.AbstractMvNormal","page":"Multivariate Distributions","title":"Distributions.AbstractMvNormal","text":"The Multivariate normal distribution is a multidimensional generalization of the normal distribution. The probability density function of a d-dimensional multivariate normal distribution with mean vector boldsymbolmu and covariance matrix boldsymbolSigma is:\n\nf(mathbfx boldsymbolmu boldsymbolSigma) = frac1(2 pi)^d2 boldsymbolSigma^12\nexp left( - frac12 (mathbfx - boldsymbolmu)^T Sigma^-1 (mathbfx - boldsymbolmu) right)\n\nWe realize that the mean vector and the covariance often have special forms in practice, which can be exploited to simplify the computation. For example, the mean vector is sometimes just a zero vector, while the covariance matrix can be a diagonal matrix or even in the form of sigma^2 mathbfI. To take advantage of such special cases, we introduce a parametric type MvNormal, defined as below, which allows users to specify the special structure of the mean and covariance.\n\nstruct MvNormal{Cov<:AbstractPDMat,Mean<:AbstractVector} <: AbstractMvNormal\n    μ::Mean\n    Σ::Cov\nend\n\nHere, the mean vector can be an instance of any AbstractVector. The covariance can be of any subtype of AbstractPDMat. Particularly, one can use PDMat for full covariance, PDiagMat for diagonal covariance, and ScalMat for the isotropic covariance – those in the form of sigma mathbfI. (See the Julia package PDMats for details).\n\nWe also define a set of alias for the types using different combinations of mean vectors and covariance:\n\nconst IsoNormal  = MvNormal{ScalMat,  Vector{Float64}}\nconst DiagNormal = MvNormal{PDiagMat, Vector{Float64}}\nconst FullNormal = MvNormal{PDMat,    Vector{Float64}}\n\nconst ZeroMeanIsoNormal{Axes}  = MvNormal{ScalMat,  Zeros{Float64,1,Axes}}\nconst ZeroMeanDiagNormal{Axes} = MvNormal{PDiagMat, Zeros{Float64,1,Axes}}\nconst ZeroMeanFullNormal{Axes} = MvNormal{PDMat,    Zeros{Float64,1,Axes}}\n\nMultivariate normal distributions support affine transformations:\n\nd = MvNormal(μ, Σ)\nc + B * d    # == MvNormal(B * μ + c, B * Σ * B')\ndot(b, d)    # == Normal(dot(b, μ), b' * Σ * b)\n\n\n\n\n\n","category":"type"},{"location":"multivariate/#Distributions.MvNormal","page":"Multivariate Distributions","title":"Distributions.MvNormal","text":"MvNormal\n\nGenerally, users don't have to worry about these internal details. We provide a common constructor MvNormal, which will construct a distribution of appropriate type depending on the input arguments.\n\nMvNormal(sig)\n\nConstruct a multivariate normal distribution with zero mean and covariance represented by sig.\n\nMvNormal(mu, sig)\n\nConstruct a multivariate normal distribution with mean mu and covariance represented by sig.\n\nMvNormal(d, sig)\n\nConstruct a multivariate normal distribution of dimension d, with zero mean, and an isotropic covariance matrix corresponding abs2(sig)*I.\n\nArguments\n\nmu::Vector{T<:Real}: The mean vector.\nd::Real: dimension of distribution.\nsig: The covariance, which can in of either of the following forms (with T<:Real):\nsubtype of AbstractPDMat,\nsymmetric matrix of type Matrix{T},\nvector of type Vector{T}: indicating a diagonal covariance as diagm(abs2(sig)),\nreal-valued number: indicating an isotropic covariance matrix corresponding abs2(sig) * I.\n\nNote: The constructor will choose an appropriate covariance form internally, so that special structure of the covariance can be exploited.\n\n\n\n\n\n","category":"type"},{"location":"multivariate/#Distributions.MvNormalCanon","page":"Multivariate Distributions","title":"Distributions.MvNormalCanon","text":"MvNormalCanon\n\nMultivariate normal distribution is an exponential family distribution, with two canonical parameters: the potential vector mathbfh and the precision matrix mathbfJ. The relation between these parameters and the conventional representation (i.e. the one using mean boldsymbolmu and covariance boldsymbolSigma) is:\n\nmathbfh = boldsymbolSigma^-1 boldsymbolmu quad text and  quad mathbfJ = boldsymbolSigma^-1\n\nThe canonical parameterization is widely used in Bayesian analysis. We provide a type MvNormalCanon, which is also a subtype of AbstractMvNormal to represent a multivariate normal distribution using canonical parameters. Particularly, MvNormalCanon is defined as:\n\nstruct MvNormalCanon{P<:AbstractPDMat,V<:AbstractVector} <: AbstractMvNormal\n    μ::V    # the mean vector\n    h::V    # potential vector, i.e. inv(Σ) * μ\n    J::P    # precision matrix, i.e. inv(Σ)\nend\n\nWe also define aliases for common specializations of this parametric type:\n\nconst FullNormalCanon = MvNormalCanon{PDMat,    Vector{Float64}}\nconst DiagNormalCanon = MvNormalCanon{PDiagMat, Vector{Float64}}\nconst IsoNormalCanon  = MvNormalCanon{ScalMat,  Vector{Float64}}\n\nconst ZeroMeanFullNormalCanon{Axes} = MvNormalCanon{PDMat,    Zeros{Float64,1}}\nconst ZeroMeanDiagNormalCanon{Axes} = MvNormalCanon{PDiagMat, Zeros{Float64,1}}\nconst ZeroMeanIsoNormalCanon{Axes}  = MvNormalCanon{ScalMat,  Zeros{Float64,1,Axes}}\n\nA multivariate distribution with canonical parameterization can be constructed using a common constructor MvNormalCanon as:\n\nMvNormalCanon(h, J)\n\nConstruct a multivariate normal distribution with potential vector h and precision matrix represented by J.\n\nMvNormalCanon(J)\n\nConstruct a multivariate normal distribution with zero mean (thus zero potential vector) and precision matrix represented by J.\n\nMvNormalCanon(d, J)\n\nConstruct a multivariate normal distribution of dimension d, with zero mean and an isotropic precision matrix corresponding J*I.\n\nArguments\n\nd::Int: dimension of distribution\nh::Vector{T<:Real}: the potential vector, of type Vector{T} with T<:Real.\nJ: the representation of the precision matrix, which can be in either of the following forms (T<:Real):\nan instance of a subtype of AbstractPDMat,\na square matrix of type Matrix{T},\na vector of type Vector{T}: indicating a diagonal precision matrix as diagm(J),\na real number: indicating an isotropic precision matrix corresponding J*I.\n\nNote: MvNormalCanon share the same set of methods as MvNormal.\n\n\n\n\n\n","category":"type"},{"location":"multivariate/#Distributions.MvLogNormal","page":"Multivariate Distributions","title":"Distributions.MvLogNormal","text":"MvLogNormal(d::MvNormal)\n\nThe Multivariate lognormal distribution is a multidimensional generalization of the lognormal distribution.\n\nIf boldsymbol X sim mathcalN(boldsymbolmuboldsymbolSigma) has a multivariate normal distribution then boldsymbol Y=exp(boldsymbol X) has a multivariate lognormal distribution.\n\nMean vector boldsymbolmu and covariance matrix boldsymbolSigma of the underlying normal distribution are known as the location and scale parameters of the corresponding lognormal distribution.\n\n\n\n\n\n","category":"type"},{"location":"multivariate/#Distributions.Dirichlet","page":"Multivariate Distributions","title":"Distributions.Dirichlet","text":"Dirichlet\n\nThe Dirichlet distribution is often used as the conjugate prior for Categorical or Multinomial distributions. The probability density function of a Dirichlet distribution with parameter alpha = (alpha_1 ldots alpha_k) is:\n\nf(x alpha) = frac1B(alpha) prod_i=1^k x_i^alpha_i - 1 quad text with \nB(alpha) = fracprod_i=1^k Gamma(alpha_i)Gamma left( sum_i=1^k alpha_i right)\nquad x_1 + cdots + x_k = 1\n\n# Let alpha be a vector\nDirichlet(alpha)         # Dirichlet distribution with parameter vector alpha\n\n# Let a be a positive scalar\nDirichlet(k, a)          # Dirichlet distribution with parameter a * ones(k)\n\n\n\n\n\n","category":"type"},{"location":"multivariate/#Distributions.Product","page":"Multivariate Distributions","title":"Distributions.Product","text":"Product <: MultivariateDistribution\n\nAn N dimensional MultivariateDistribution constructed from a vector of N independent UnivariateDistributions.\n\nProduct(Uniform.(rand(10), 1)) # A 10-dimensional Product from 10 independent `Uniform` distributions.\n\n\n\n\n\n","category":"type"},{"location":"multivariate/#Addition-Methods","page":"Multivariate Distributions","title":"Addition Methods","text":"","category":"section"},{"location":"multivariate/#AbstractMvNormal","page":"Multivariate Distributions","title":"AbstractMvNormal","text":"","category":"section"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"In addition to the methods listed in the common interface above, we also provide the following methods for all multivariate distributions under the base type AbstractMvNormal:","category":"page"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"invcov(::Distributions.AbstractMvNormal)\nlogdetcov(::Distributions.AbstractMvNormal)\nsqmahal(::Distributions.AbstractMvNormal, ::AbstractArray)\nrand(::AbstractRNG, ::Distributions.AbstractMvNormal)","category":"page"},{"location":"multivariate/#Distributions.invcov-Tuple{AbstractMvNormal}","page":"Multivariate Distributions","title":"Distributions.invcov","text":"invcov(d::AbstractMvNormal)\n\nReturn the inversed covariance matrix of d.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Distributions.logdetcov-Tuple{AbstractMvNormal}","page":"Multivariate Distributions","title":"Distributions.logdetcov","text":"logdetcov(d::AbstractMvNormal)\n\nReturn the log-determinant value of the covariance matrix.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Distributions.sqmahal-Tuple{AbstractMvNormal,AbstractArray}","page":"Multivariate Distributions","title":"Distributions.sqmahal","text":"sqmahal(d, x)\n\nReturn the squared Mahalanobis distance from x to the center of d, w.r.t. the covariance. When x is a vector, it returns a scalar value. When x is a matrix, it returns a vector of length size(x,2).\n\nsqmahal!(r, d, x) with write the results to a pre-allocated array r.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Base.rand-Tuple{AbstractRNG,AbstractMvNormal}","page":"Multivariate Distributions","title":"Base.rand","text":"rand(::AbstractRNG, ::Distributions.AbstractMvNormal)\n\nSample a random vector from the provided multi-variate normal distribution.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#MvLogNormal","page":"Multivariate Distributions","title":"MvLogNormal","text":"","category":"section"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"In addition to the methods listed in the common interface above, we also provide the following methods:","category":"page"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"location(::MvLogNormal)\nscale(::MvLogNormal)\nmedian(::MvLogNormal)\nmode(::MvLogNormal)","category":"page"},{"location":"multivariate/#Distributions.location-Tuple{MvLogNormal}","page":"Multivariate Distributions","title":"Distributions.location","text":"location(d::MvLogNormal)\n\nReturn the location vector of the distribution (the mean of the underlying normal distribution).\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Distributions.scale-Tuple{MvLogNormal}","page":"Multivariate Distributions","title":"Distributions.scale","text":"scale(d::MvLogNormal)\n\nReturn the scale matrix of the distribution (the covariance matrix of the underlying normal distribution).\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Statistics.median-Tuple{MvLogNormal}","page":"Multivariate Distributions","title":"Statistics.median","text":"median(d::MvLogNormal)\n\nReturn the median vector of the lognormal distribution. which is strictly smaller than the mean.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#StatsBase.mode-Tuple{MvLogNormal}","page":"Multivariate Distributions","title":"StatsBase.mode","text":"mode(d::MvLogNormal)\n\nReturn the mode vector of the lognormal distribution, which is strictly smaller than the mean and median.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"It can be necessary to calculate the parameters of the lognormal (location vector and scale matrix) from a given covariance and mean, median or mode. To that end, the following functions are provided.","category":"page"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"location{D<:Distributions.AbstractMvLogNormal}(::Type{D},s::Symbol,m::AbstractVector,S::AbstractMatrix)\nlocation!{D<:Distributions.AbstractMvLogNormal}(::Type{D},s::Symbol,m::AbstractVector,S::AbstractMatrix,μ::AbstractVector)\nscale{D<:Distributions.AbstractMvLogNormal}(::Type{D},s::Symbol,m::AbstractVector,S::AbstractMatrix)\nscale!{D<:Distributions.AbstractMvLogNormal}(::Type{D},s::Symbol,m::AbstractVector,S::AbstractMatrix,Σ::AbstractMatrix)\nparams{D<:Distributions.AbstractMvLogNormal}(::Type{D},m::AbstractVector,S::AbstractMatrix)","category":"page"},{"location":"multivariate/#Distributions.location-Union{Tuple{D}, Tuple{Type{D},Symbol,AbstractArray{T,1} where T,AbstractArray{T,2} where T}} where D<:Distributions.AbstractMvLogNormal","page":"Multivariate Distributions","title":"Distributions.location","text":"location{D<:AbstractMvLogNormal}(::Type{D},s::Symbol,m::AbstractVector,S::AbstractMatrix)\n\nCalculate the location vector (the mean of the underlying normal distribution).\n\nIf s == :meancov, then m is taken as the mean, and S the covariance matrix of a lognormal distribution.\nIf s == :mean | :median | :mode, then m is taken as the mean, median or mode of the lognormal respectively, and S is interpreted as the scale matrix (the covariance of the underlying normal distribution).\n\nIt is not possible to analytically calculate the location vector from e.g., median + covariance, or from mode + covariance.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Distributions.location!-Union{Tuple{D}, Tuple{Type{D},Symbol,AbstractArray{T,1} where T,AbstractArray{T,2} where T,AbstractArray{T,1} where T}} where D<:Distributions.AbstractMvLogNormal","page":"Multivariate Distributions","title":"Distributions.location!","text":"location!{D<:AbstractMvLogNormal}(::Type{D},s::Symbol,m::AbstractVector,S::AbstractMatrix,μ::AbstractVector)\n\nCalculate the location vector (as above) and store the result in μ\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Distributions.scale-Union{Tuple{D}, Tuple{Type{D},Symbol,AbstractArray{T,1} where T,AbstractArray{T,2} where T}} where D<:Distributions.AbstractMvLogNormal","page":"Multivariate Distributions","title":"Distributions.scale","text":"scale{D<:AbstractMvLogNormal}(::Type{D},s::Symbol,m::AbstractVector,S::AbstractMatrix)\n\nCalculate the scale parameter, as defined for the location parameter above.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Distributions.scale!-Union{Tuple{D}, Tuple{Type{D},Symbol,AbstractArray{T,1} where T,AbstractArray{T,2} where T,AbstractArray{T,2} where T}} where D<:Distributions.AbstractMvLogNormal","page":"Multivariate Distributions","title":"Distributions.scale!","text":"scale!{D<:AbstractMvLogNormal}(::Type{D},s::Symbol,m::AbstractVector,S::AbstractMatrix,Σ::AbstractMatrix)\n\nCalculate the scale parameter, as defined for the location parameter above and store the result in Σ.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#StatsBase.params-Union{Tuple{D}, Tuple{Type{D},AbstractArray{T,1} where T,AbstractArray{T,2} where T}} where D<:Distributions.AbstractMvLogNormal","page":"Multivariate Distributions","title":"StatsBase.params","text":"params{D<:AbstractMvLogNormal}(::Type{D},m::AbstractVector,S::AbstractMatrix)\n\nReturn (scale,location) for a given mean and covariance\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Internal-Methods-(for-creating-you-own-multivariate-distribution)","page":"Multivariate Distributions","title":"Internal Methods (for creating you own multivariate distribution)","text":"","category":"section"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"Distributions._logpdf(d::MultivariateDistribution, x::AbstractArray)","category":"page"},{"location":"multivariate/#Distributions._logpdf-Tuple{Distribution{Multivariate,S} where S<:ValueSupport,AbstractArray}","page":"Multivariate Distributions","title":"Distributions._logpdf","text":"_logpdf{T<:Real}(d::MultivariateDistribution, x::AbstractArray)\n\nEvaluate logarithm of pdf value for a given vector x. This function need not perform dimension checking. Generally, one does not need to implement pdf (or _pdf) as fallback methods are provided in src/multivariates.jl.\n\n\n\n\n\n","category":"method"},{"location":"multivariate/#Product-distributions","page":"Multivariate Distributions","title":"Product distributions","text":"","category":"section"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"Distributions.product_distribution","category":"page"},{"location":"multivariate/#Distributions.product_distribution","page":"Multivariate Distributions","title":"Distributions.product_distribution","text":"product_distribution(dists::AbstractVector{<:UnivariateDistribution})\n\nCreates a multivariate product distribution P from a vector of univariate distributions. Fallback is the Product constructor, but specialized methods can be defined for distributions with a special multivariate product.\n\n\n\n\n\nproduct_distribution(dists::AbstractVector{<:Normal})\n\nComputes the multivariate Normal distribution obtained by stacking the univariate normal distributions. The result is a multivariate Gaussian with a diagonal covariance matrix.\n\n\n\n\n\n","category":"function"},{"location":"multivariate/","page":"Multivariate Distributions","title":"Multivariate Distributions","text":"Using product_distribution is advised to construct product distributions.  For some distributions, it constructs a special multivariate type.","category":"page"},{"location":"types/#Type-Hierarchy","page":"Type Hierarchy","title":"Type Hierarchy","text":"","category":"section"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"All samplers and distributions provided in this package are organized into a type hierarchy described as follows.","category":"page"},{"location":"types/#Sampleable","page":"Type Hierarchy","title":"Sampleable","text":"","category":"section"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"The root of this type hierarchy is Sampleable. The abstract type Sampleable subsumes any types of objects from which one can draw samples, which particularly includes samplers and distributions. Formally, Sampleable is defined as","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"abstract type Sampleable{F<:VariateForm,S<:ValueSupport} end","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"It has two type parameters that define the kind of samples that can be drawn therefrom.","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"Distributions.Sampleable\nBase.rand(::Distributions.Sampleable)","category":"page"},{"location":"types/#VariateForm","page":"Type Hierarchy","title":"VariateForm","text":"","category":"section"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"Distributions.VariateForm","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"The VariateForm sub-types defined in Distributions.jl are:","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"Type A single sample Multiple samples\nUnivariate a scalar number A numeric array of arbitrary shape, each element being a sample\nMultivariate a numeric vector A matrix, each column being a sample\nMatrixvariate a numeric matrix An array of matrices, each element being a sample matrix","category":"page"},{"location":"types/#ValueSupport","page":"Type Hierarchy","title":"ValueSupport","text":"","category":"section"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"Distributions.ValueSupport","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"The ValueSupport sub-types defined in Distributions.jl are:","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"Type Element type Descriptions\nDiscrete Int Samples take discrete values\nContinuous Float64 Samples take continuous real values","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"Multiple samples are often organized into an array, depending on the variate form.","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"The basic functionalities that a sampleable object provides is to retrieve information about the samples it generates and to draw samples. Particularly, the following functions are provided for sampleable objects:","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"length(::Sampleable)\nsize(::Sampleable)\nnsamples(::Type{Sampleable}, ::Any)\neltype(::Type{Sampleable})\nrand(::AbstractRNG, ::Sampleable)\nrand!(::AbstractRNG, ::Sampleable, ::AbstractArray)","category":"page"},{"location":"types/#Base.length-Tuple{Sampleable}","page":"Type Hierarchy","title":"Base.length","text":"length(s::Sampleable)\n\nThe length of each sample. Always returns 1 when s is univariate.\n\n\n\n\n\n","category":"method"},{"location":"types/#Base.size-Tuple{Sampleable}","page":"Type Hierarchy","title":"Base.size","text":"size(s::Sampleable)\n\nThe size (i.e. shape) of each sample. Always returns () when s is univariate, and (length(s),) when s is multivariate.\n\n\n\n\n\n","category":"method"},{"location":"types/#Distributions.nsamples-Tuple{Type{Sampleable},Any}","page":"Type Hierarchy","title":"Distributions.nsamples","text":"nsamples(s::Sampleable)\n\nThe number of values contained in one sample of s. Multiple samples are often organized into an array, depending on the variate form.\n\n\n\n\n\n","category":"method"},{"location":"types/#Base.eltype-Tuple{Type{Sampleable}}","page":"Type Hierarchy","title":"Base.eltype","text":"eltype(::Type{Sampleable})\n\nThe default element type of a sample. This is the type of elements of the samples generated by the rand method. However, one can provide an array of different element types to store the samples using rand!.\n\n\n\n\n\n","category":"method"},{"location":"types/#Base.rand-Tuple{AbstractRNG,Sampleable}","page":"Type Hierarchy","title":"Base.rand","text":"rand(::AbstractRNG, ::Sampleable)\n\nSamples from the sampler and returns the result.\n\n\n\n\n\n","category":"method"},{"location":"types/#Random.rand!-Tuple{AbstractRNG,Sampleable,AbstractArray}","page":"Type Hierarchy","title":"Random.rand!","text":"rand!(::AbstractRNG, ::Sampleable, ::AbstractArray)\n\nSamples in-place from the sampler and stores the result in the provided array.\n\n\n\n\n\n","category":"method"},{"location":"types/#Distributions","page":"Type Hierarchy","title":"Distributions","text":"","category":"section"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"We use Distribution, a subtype of Sampleable as defined below, to capture probabilistic distributions. In addition to being sampleable, a distribution typically comes with an explicit way to combine its domain, probability density functions, among many other quantities.","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"abstract type Distribution{F<:VariateForm,S<:ValueSupport} <: Sampleable{F,S} end","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"Distributions.Distribution","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"To simplify the use in practice, we introduce a series of type alias as follows:","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"const UnivariateDistribution{S<:ValueSupport}   = Distribution{Univariate,S}\nconst MultivariateDistribution{S<:ValueSupport} = Distribution{Multivariate,S}\nconst MatrixDistribution{S<:ValueSupport}       = Distribution{Matrixvariate,S}\nconst NonMatrixDistribution = Union{UnivariateDistribution, MultivariateDistribution}\n\nconst DiscreteDistribution{F<:VariateForm}   = Distribution{F,Discrete}\nconst ContinuousDistribution{F<:VariateForm} = Distribution{F,Continuous}\n\nconst DiscreteUnivariateDistribution     = Distribution{Univariate,    Discrete}\nconst ContinuousUnivariateDistribution   = Distribution{Univariate,    Continuous}\nconst DiscreteMultivariateDistribution   = Distribution{Multivariate,  Discrete}\nconst ContinuousMultivariateDistribution = Distribution{Multivariate,  Continuous}\nconst DiscreteMatrixDistribution         = Distribution{Matrixvariate, Discrete}\nconst ContinuousMatrixDistribution       = Distribution{Matrixvariate, Continuous}","category":"page"},{"location":"types/","page":"Type Hierarchy","title":"Type Hierarchy","text":"All methods applicable to Sampleable also applies to Distribution. The API for distributions of different variate forms are different (refer to univariates, multivariates, and matrix for details).","category":"page"}]
}
